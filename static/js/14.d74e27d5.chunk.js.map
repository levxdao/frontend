{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/hooks/useDelayedOnBlockEffect.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","useDelayedOnBlockEffect","effect","getEventName","inputs","initialTimeout","addOnBlockListener","removeOnBlockListener","eventName","useAsyncEffect","setTimeout","handles","forEach","handle","clearTimeout","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","viewOnly","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","useEffect","undefined","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","chainId","large","TokenItem","Deposit","DepositInfo","marginRight","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/14.d74e27d5.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext } from \"react\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext, OnBlockListener } from \"../context/EthersContext\";\n\nconst useDelayedOnBlockEffect = (\n    effect: OnBlockListener,\n    getEventName: () => string,\n    inputs?: any[],\n    initialTimeout = 500\n) => {\n    const { addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const eventName = getEventName();\n    useAsyncEffect<number[]>(\n        () => {\n            return [\n                setTimeout(effect, initialTimeout),\n                setTimeout(() => addOnBlockListener(eventName, effect), initialTimeout)\n            ];\n        },\n        handles => {\n            if (handles) {\n                handles.forEach(handle => clearTimeout(handle));\n                removeOnBlockListener(eventName);\n            }\n        },\n        inputs\n    );\n};\n\nexport default useDelayedOnBlockEffect;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    disabled?: boolean;\n    viewOnly?: boolean;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    viewOnly?: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                viewOnly={props.viewOnly}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    viewOnly={props.viewOnly}\n                    onSelectToken={props.disabled ? () => {} : onUnselectToken}\n                />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? !props.viewOnly && <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : fetchMyLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"plant-lp-tokens\")} />\n                    <Text light={true}>{t(\"plant-lp-tokens-desc\")}</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useFarmingState(false);\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={t(\"active-farms\")}\n                emptyText={t(\"unable-to-load-farms\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice text={t(\"sushi-vested-notice\")} clear={true} style={{ marginTop: Spacing.normal }} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const multiplier = props.token.multiplier || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, alignItems: \"flex-end\", marginRight: 4 }}>\n                    <Text note={true}>\n                        {multiplier > 1 ? \"✨\" : \"\"}\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\n                    </Text>\n                    <Text caption={IS_DESKTOP} medium={true}>\n                        {formatPercentage(apy)}%\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={t(\"tokens-needed-for-farming-notice\", { symbol: state.selectedLPToken!.symbol })}\n            />\n            <Button\n                color={green}\n                title={t(\"add-liquidity\")}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={t(\"sushi-per-year\")} disabled={disabled} />\n            <Meta\n                label={t(\"my-balance\")}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"total-value-locked\")}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"annual-percentage-yield\")}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={t(\"deposit\")} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}
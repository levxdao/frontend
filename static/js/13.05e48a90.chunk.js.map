{"version":3,"sources":["src/components/Notice.tsx","src/components/TokenName.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenPrice.tsx","src/components/TokenValue.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/components/Select.tsx","src/components/UnsupportedButton.tsx","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx"],"names":["Notice","props","textLight","useColors","borderStyle","border","useStyles","color","style","clear","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","Spacing","tiny","TokenName","caption","numberOfLines","ellipsizeMode","marginLeft","small","width","disabled","IS_DESKTOP","token","name","symbol","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","formatBalance","amount","balance","decimals","TokenPrice","formatUSD","priceUSD","TokenValue","valueUSD","Loading","ActivityIndicator","position","right","bottom","TokenItem","t","useTranslation","accent","useCallback","onSelectToken","Selectable","selected","containerStyle","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","height","TokenSearch","useContext","EthersContext","provider","tokens","useState","tokenToAdd","setTokenToAdd","loading","setLoading","findIndex","tk","address","useEffect","undefined","a","async","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","placeholder","autoFocus","inputStyle","marginHorizontal","fontSize","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","hidden","sort","compareTokens","length","FlatList","keyExtractor","EmptyList","margin","normal","Text","textAlign","selectable","TokenSymbol","viewOnly","CloseIcon","SelectIcon","t1","t2","isZero","value2","value1","localeCompare","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","includes","Item","paddingLeft","paddingRight","setOption","option","description","Select","options","map","UnsupportedButton","state","fromSymbol","toSymbol","useAddLiquidityState","useTokenPairState","signer","updateTokens","mode","setMode","pair","setPair","adding","setAdding","getPair","useSDK","useSwapRouter","addLiquidity","addLiquidityETH","zapIn","useZapper","priceDetermined","toToken","priceOf","convertToken","denominator","startsWith","setFromSymbol","useDelayedOnBlockEffect","block","fromToken","onAdd","fromAmount","toAmount","parseBalance","tx","wait","isETH","amountETH","AddLiquidity","chainId","ChangeNetwork","large","Border","ItemSeparator","FromTokenSelect","customTokens","ToTokenSelect","setToSymbol","Heading","FromTokenInput","TokenInput","onAmountChanged","newAmount","setFromAmount","quote","convertAmount","toExact","setToAmount","isEmptyValue","hideMaxButton","ToTokenInput","PriceInfo","FirstProviderInfo","green","red","noAmount","initialPrice","Fraction","from","InfoBox","price","isETHWETHPair","FirstProviderControls","error","setError","fromApproveRequired","fromTokenAllowed","toApproveRequired","toTokenAllowed","onError","FetchingButton","gt","InsufficientBalanceButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","setToTokenAllowed","message","code","ErrorMessage","PairPriceInfo","useAmountCalculator","lpTokenAmount","toFixed","AmountMeta","suffix","Meta","label","setAmount","calculateAmountOfLPTokenMinted","div","to","minted","liquidityToken","PriceMeta","Controls","useZapTokenAllowance","allowed","setAllowed","zapToken","getTokenAllowance","minAllowance","BigNumber","pow","sub","ZAP_IN","fromAllowance","gte","SupplyButton","goToRemoveLiquidity","useLinker","LiquidityScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/13.05e48a90.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenPriceProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenPrice: FC<TokenPriceProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.priceUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenPrice;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenValueProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenValue: FC<TokenValueProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.valueUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenValue;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const t = useTranslation();\n    const { border } = useStyles();\n    const { provider, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(tk => tk.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(address, provider);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={t(\"token-name-symbol-or-address\")}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const t = useTranslation();\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? t(\"already-added\") : t(\"-add-\") + \" \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenPrice from \"./TokenPrice\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\nimport TokenValue from \"./TokenValue\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    viewOnly?: boolean;\n    style?: ViewStyle;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n        props.onChangeSymbol(t.symbol);\n    };\n    const hidden = (t: Token) => {\n        if (query.length > 0) {\n            return !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return props.hidden?.(t) || false;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.symbol}\n                viewOnly={true}\n                onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && (\n                <TokenItem\n                    token={token}\n                    selected={true}\n                    onSelectToken={onUnselectToken}\n                    selectable={true}\n                    viewOnly={props.viewOnly}\n                />\n            )}\n        </View>\n    );\n};\n\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () => tokens.filter(token => (props.hidden ? !props.hidden(token) : true)).sort(compareTokens),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"you-dont-have-assets\")}\n            </Text>\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem = (props: {\n    token: TokenWithValue;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n    viewOnly?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <View>\n                    {props.token.priceUSD !== null && (\n                        <TokenPrice\n                            token={props.token}\n                            disabled={props.disabled}\n                            style={{ marginLeft: Spacing.small }}\n                        />\n                    )}\n                    <TokenName token={props.token} disabled={props.disabled} />\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    {props.token.valueUSD !== null && <TokenValue token={props.token} disabled={props.disabled} />}\n                    <FlexView>\n                        <TokenAmount\n                            token={props.token}\n                            disabled={props.disabled}\n                            style={{ flex: 1, textAlign: \"right\" }}\n                        />\n                        {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                    </FlexView>\n                </View>\n                {props.selected ? !props.viewOnly && <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst compareTokens = (t1: TokenWithValue, t2: TokenWithValue) => {\n    if (t2.balance.isZero() && t1.balance.isZero()) return (t2?.priceUSD || 0) - (t1?.priceUSD || 0);\n    const value2 = t2?.valueUSD || 0;\n    const value1 = t1?.valueUSD || 1;\n    if (value2 === value1) {\n        return (\n            (t2.balance.isZero() ? 0 : 10000000000) -\n            (t1.balance.isZero() ? 0 : 10000000000) +\n            t1.symbol.localeCompare(t2.symbol)\n        );\n    }\n    return value2 - value1;\n};\n\nexport default TokenSelect;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nexport interface Option {\n    key: string;\n    title: string;\n    description: string;\n}\n\nexport interface SelectProps {\n    title: string;\n    options: Option[];\n    option?: Option;\n    setOption: (option?: Option) => void;\n}\n\nconst Select: FC<SelectProps> = props => {\n    return (\n        <View>\n            <Expandable title={props.title} expanded={!props.option} onExpand={() => props.setOption()}>\n                {props.options.map(option => (\n                    <Item\n                        key={option.key}\n                        option={option}\n                        setOption={props.setOption}\n                        selected={option.key === props.option?.key}\n                    />\n                ))}\n            </Expandable>\n            {props.option && (\n                <Item option={props.option} setOption={props.setOption} selected={true} selectable={false} />\n            )}\n        </View>\n    );\n};\n\nconst Item = (props: {\n    option: Option;\n    setOption?: (option?: Option) => void;\n    selected: boolean;\n    selectable?: boolean;\n}) => {\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{ paddingLeft: Spacing.small + Spacing.tiny, paddingRight: Spacing.small }}\n            selected={props.selected}\n            disabled={props.selectable}\n            onPress={() => props.setOption?.(props.selected ? undefined : props.option)}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <View style={{ flex: 1 }}>\n                    <Text fontWeight={\"regular\"}>{props.option.title}</Text>\n                    <Text note={true} style={{ marginTop: 4 }}>\n                        {props.option.description}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default Select;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    const t = useTranslation();\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" \" + t(\"not-supported\")} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, isETH, parseBalance } from \"../utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useSwapRouter from \"./useSwapRouter\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\nimport useZapper from \"./useZapper\";\n\nexport type AddLiquidityMode = \"normal\" | \"zapper\";\n\nexport interface AddLiquidityState extends TokenPairState {\n    mode?: AddLiquidityMode;\n    setMode: (mode?: AddLiquidityMode) => void;\n    pair?: Pair;\n    priceDetermined: boolean;\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, updateTokens } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [mode, setMode] = useState<AddLiquidityMode>();\n    const [pair, setPair] = useState<Pair>();\n    const [adding, setAdding] = useState(false);\n    const { getPair } = useSDK();\n    const { addLiquidity, addLiquidityETH } = useSwapRouter();\n    const { zapIn } = useZapper();\n    const priceDetermined =\n        !!pair &&\n        !!state.toToken &&\n        !pair\n            .priceOf(convertToken(state.toToken))\n            .denominator.toString()\n            .startsWith(\"0\");\n\n    useEffect(() => {\n        setPair(undefined);\n        state.setFromSymbol(\"\");\n    }, [mode]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n                setPair(undefined);\n            }\n            if (state.fromToken && state.toToken && provider) {\n                try {\n                    setPair(await getPair(state.fromToken, state.toToken, provider));\n                } catch (e) {\n                } finally {\n                    setLoading(false);\n                }\n            } else {\n                setLoading(false);\n            }\n        },\n        () => \"getPair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\",\n        [state.fromSymbol, state.toSymbol, provider],\n        0\n    );\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && provider && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (mode === \"zapper\") {\n                    const tx = await zapIn(state.fromToken, state.toToken, fromAmount, provider, signer);\n                    await tx.wait();\n                } else if (isETH(state.fromToken) || isETH(state.toToken)) {\n                    const [token, amount, amountETH] = isETH(state.fromToken)\n                        ? [state.toToken, toAmount, fromAmount]\n                        : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, provider, signer]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        mode,\n        setMode,\n        pair,\n        priceDetermined,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport ItemSeparator from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Select, { Option } from \"../components/Select\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AmmSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, ZAP_IN } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAddLiquidityState, { AddLiquidityMode, AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSDK from \"../hooks/useSDK\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, isETH, isETHWETHPair, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"add-liquidity\")} />\n                    <Text light={true}>{t(\"add-liquidity-desc\")}</Text>\n                    <AddLiquidity />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AmmSubMenu />\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useAddLiquidityState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {/*<ModeSelect state={state} />*/}\n            {/*<Border />*/}\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <FromTokenInput state={state} />\n            {/*{state.mode === \"zapper\" ? (\n                <ZapNotice state={state} />\n            ) : (*/}\n            <>\n                <ItemSeparator />\n                <ToTokenInput state={state} />\n            </>\n            {/*)}*/}\n            <PriceInfo state={state} />\n        </View>\n    );\n};\n\nconst ModeSelect = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    const options: Option[] = [\n        {\n            key: \"zapper\",\n            title: t(\"1-click-zap\"),\n            description: t(\"1-click-zap-desc\")\n        },\n        { key: \"normal\", title: t(\"normal\"), description: t(\"normal-desc\") }\n    ];\n    return (\n        <Select\n            title={t(\"mode\")}\n            options={options}\n            option={options.find(option => option.key === state.mode)}\n            setOption={option => state.setMode(option?.key as AddLiquidityMode | undefined)}\n        />\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    const { customTokens } = useContext(EthersContext);\n    return (\n        <TokenSelect\n            title={t(\"1st-token\")}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            hidden={token => !customTokens.find(tk => tk.address === token.address) && token.balance.isZero()}\n        />\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    const { customTokens } = useContext(EthersContext);\n    if (!state.fromSymbol) {\n        return <Heading text={t(\"2nd-token\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={t(\"2nd-token\")}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol ||\n                    (!customTokens.find(tk => tk.address === token.address) && token.balance.isZero())\n                }\n            />\n        </View>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={t(\"amount-of-tokens\")} disabled={true} />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setFromAmount(newAmount);\n        if (state.pair && state.fromToken && state.priceDetermined) {\n            const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n            const toAmount = fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact();\n            state.setToAmount(isEmptyValue(toAmount) ? \"\" : toAmount);\n        }\n    };\n    return (\n        <TokenInput\n            title={/*state.mode === \"zapper\" ? t(\"amount-of-\", { symbol: state.fromSymbol }) :*/ t(\"amount-of-tokens\")}\n            token={state.fromToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) return <View />;\n    const onAmountChanged = (newAmount: string) => {\n        state.setToAmount(newAmount);\n        if (state.pair && state.toToken && state.priceDetermined) {\n            const toPrice = state.pair.priceOf(convertToken(state.toToken));\n            const fromAmount = toPrice.quote(convertAmount(state.toToken, newAmount)).toExact();\n            state.setFromAmount(isEmptyValue(fromAmount) ? \"\" : fromAmount);\n        }\n    };\n    return (\n        <TokenInput\n            token={state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ZapNotice = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    if (!state.fromSymbol || !state.toSymbol || !state.pair) return <View />;\n    return (\n        <Notice\n            clear={true}\n            text={t(\"zap-notice\", { fromSymbol: state.fromSymbol, toSymbol: state.toSymbol })}\n            style={{ marginTop: Spacing.small }}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (state.fromToken && state.toToken && !state.loading && (!state.pair || !state.priceDetermined)) {\n        return <FirstProviderInfo state={state} />;\n    } else {\n        return <PairPriceInfo state={state} />;\n    }\n};\n\nconst FirstProviderInfo = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    const { red, green } = useColors();\n    const noAmount = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const initialPrice = Fraction.from(\n        parseBalance(state.toAmount, state.toToken!.decimals),\n        parseBalance(state.fromAmount, state.fromToken!.decimals)\n    ).toString(8);\n    /*const zap = state.mode === \"zapper\";*/\n    return (\n        <View>\n            {/*{!zap && (*/}\n            <InfoBox style={{ marginTop: Spacing.normal }}>\n                <PriceMeta state={state} price={initialPrice} disabled={noAmount} />\n                <FirstProviderControls state={state} />\n            </InfoBox>\n            {/*)}*/}\n            {!isETHWETHPair(state.fromToken, state.toToken) && (\n                <Notice\n                    text={\n                        t(\"first-provider-desc-1\") +\n                        /*zap ? t(\"first-provider-desc-zap\") : */ t(\"first-provider-desc-2\")\n                    }\n                    color={/*zap ? red : */ green}\n                    style={{ marginTop: Spacing.small }}\n                />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst FirstProviderControls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const fromApproveRequired = !isETH(state.fromToken) && !state.fromTokenAllowed;\n    const toApproveRequired = !isETH(state.toToken) && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || isEmptyValue(state.fromAmount) || toApproveRequired || isEmptyValue(state.toAmount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {isETHWETHPair(state.fromToken, state.toToken) ? (\n                <UnsupportedButton state={state} />\n            ) : !state.fromToken || !state.toToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PairPriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    const t = useTranslation();\n    const { fromAmount, toAmount, lpTokenAmount } = useAmountCalculator(state);\n    const disabled = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const price =\n        state.pair && state.fromToken && state.priceDetermined\n            ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8)\n            : undefined;\n    const symbol = state.fromSymbol + \"-\" + state.toSymbol;\n    return (\n        <InfoBox>\n            <AmountMeta amount={lpTokenAmount} suffix={symbol} disabled={disabled} />\n            <Meta text={fromAmount?.toFixed()} label={state.fromSymbol || t(\"1st-token\")} disabled={disabled} />\n            <Meta text={toAmount?.toFixed()} label={state.toSymbol || t(\"2nd-token\")} disabled={disabled} />\n            <PriceMeta state={state} price={price} disabled={!state.fromSymbol || !state.toSymbol} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst useAmountCalculator = (state: AddLiquidityState) => {\n    const [amount, setAmount] = useState<string>();\n    const [fromAmount, setFromAmount] = useState<TokenAmount>();\n    const [toAmount, setToAmount] = useState<TokenAmount>();\n    const { calculateAmountOfLPTokenMinted } = useSDK();\n    useAsyncEffect(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.pair &&\n            !isEmptyValue(state.fromAmount) &&\n            !isEmptyValue(state.toAmount)\n        ) {\n            const from = new TokenAmount(\n                convertToken(state.fromToken),\n                parseBalance(state.fromAmount, state.fromToken.decimals)\n                    .div(/*state.mode === \"zapper\" ? 2 : */ 1)\n                    .toString()\n            );\n            setFromAmount(from);\n            const to = /*state.mode === \"zapper\"\n                    ? state.pair.getOutputAmount(from)[0]\n                    : */ convertAmount(\n                state.toToken,\n                state.toAmount\n            );\n            setToAmount(to);\n            const minted = await calculateAmountOfLPTokenMinted(state.pair, from, to);\n            setAmount(minted ? formatBalance(minted, state.pair.liquidityToken.decimals) : undefined);\n        }\n    }, [state.pair, state.fromAmount, state.toAmount]);\n    return { fromAmount, toAmount, lpTokenAmount: amount };\n};\n\nconst PriceMeta = ({ state, price, disabled }) => {\n    const t = useTranslation();\n    return (\n        <Meta\n            label={t(\"ratio\")}\n            text={price}\n            suffix={state.toSymbol + \" = 1 \" + state.fromSymbol}\n            disabled={disabled}\n        />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    const { allowed, setAllowed, loading } = useZapTokenAllowance(state.fromToken);\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    /*const zap = state.mode === \"zapper\";\n    const fromApproveRequired = !isETH(state.fromToken) && ((zap && !allowed) || (!zap && !state.fromTokenAllowed));\n    const toApproveRequired = !isETH(state.toToken) && !zap && !state.toTokenAllowed;*/\n    const fromApproveRequired = !isETH(state.fromToken) && !state.fromTokenAllowed;\n    const toApproveRequired = !isETH(state.toToken) && !state.toTokenAllowed;\n    const disabled =\n            fromApproveRequired ||\n            isEmptyValue(state.fromAmount) ||\n            /*(!zap && (*/ toApproveRequired ||\n            isEmptyValue(state.toAmount) /*))*/;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {isETHWETHPair(state.fromToken, state.toToken) ? (\n                <UnsupportedButton state={state} />\n            ) : !state.fromToken || !state.toToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading || loading || !state.pair ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.mode === \"normal\" &&\n              parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={/*zap ? ZAP_IN : */ ROUTER}\n                        onSuccess={() => /*zap ? setAllowed(true) : */ state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst useZapTokenAllowance = (zapToken?: Token) => {\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const [allowed, setAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    useAsyncEffect(async () => {\n        setAllowed(false);\n        if (zapToken && signer) {\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (isETH(zapToken)) {\n                    const fromAllowance = await getTokenAllowance(zapToken.address, ZAP_IN);\n                    setAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [zapToken, signer]);\n    return { allowed, setAllowed, loading };\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onAdd();\n            goToRemoveLiquidity();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            title={t(\"supply-\", {\n                symbol: state.fromSymbol && state.toSymbol ? \" \" + state.fromSymbol + \"-\" + state.toSymbol : \"\"\n            })}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n"],"sourceRoot":""}
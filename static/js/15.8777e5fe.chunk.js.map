{"version":3,"sources":["src/components/Heading.tsx","src/components/ChangeNetwork.tsx","src/components/AmountMeta.tsx","src/components/Loading.tsx","src/constants/index.ts","src/components/Notice.tsx","src/hooks/useLevxDistributionState.tsx","src/screens/LevxDistributionScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","AmountMeta","textDark","textLight","placeholder","normal","amount","suffix","Loading","TTL","ALLOWED_SLIPPAGE","Percent","FEE","API_SERVER","process","Notice","borderStyle","border","useStyles","clear","note","titleStyle","paddingVertical","alignSelf","marginTop","getRedirectUri","window","location","protocol","hostname","port","getLoginMethod","user","split","sub","provider","getContract","signer","Contract","address","abi","useLevxDistributionState","useAuth0","isLoading","isAuthenticated","loginWithRedirect","logout","getAccessTokenSilently","useContext","EthersContext","useState","authenticating","setAuthenticating","auth","setAuth","pendingAmount","setPendingAmount","claimedAmount","setClaimedAmount","starting","setStarting","claiming","setClaiming","lastUpdated","setLastUpdated","useAsyncEffect","a","async","search","history","replaceState","undefined","scope","accessToken","fetch","resp","status","json","data","contract","start","filters","Start","id","queryFilter","receipt","blockNumber","length","claim","Claim","map","event","args","reduce","prev","current","add","BigNumber","from","loading","loginMethod","onLogin","method","connection","redirectUri","onLogout","returnTo","onStart","signature","v","r","s","utils","parseEther","tx","wait","Date","now","onClaim","constants","AddressZero","LevxDistribution","state","View","LoginInfo","name","secondary","Text","caption","formatEther","full","claimed","Button","DistributionInfo","Eligible","tweeted","setTweeted","TweetButton","twitter","icon","open","encodeURIComponent","NotEligible","discord","onTwitter","useLinker","onDiscord","SignInButtons","LevxDistributionScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/15.8777e5fe.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { Percent } from \"@sushiswap/sdk\";\n\nexport const TTL = 60 * 20;\nexport const ALLOWED_SLIPPAGE = new Percent(\"50\", \"10000\"); // 0.05%\nexport const FEE = new Percent(\"3\", \"1000\"); // 0.3%\nexport const API_SERVER = process.env.NODE_ENV === \"production\" ? \"https://api.levxdao.org\" : \"http://localhost:3001\";\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext, useState } from \"react\";\n\nimport { useAuth0, User } from \"@auth0/auth0-react\";\nimport { abi } from \"@levxdao/airdrop/artifacts/contracts/LevxStreaming.sol/LevxStreaming.json\";\nimport { address, receipt } from \"@levxdao/airdrop/deployments/mainnet/LevxStreaming.json\";\nimport { LevxStreaming } from \"@levxdao/airdrop/typechain/LevxStreaming\";\nimport { BigNumber, constants, Contract, providers, utils } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { API_SERVER } from \"../constants\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nexport interface LevxDistributionState {\n    loading: boolean;\n    authenticating: boolean;\n    user?: User;\n    loginMethod?: LoginMethod;\n    auth?: Auth;\n    pendingAmount?: BigNumber;\n    claimedAmount?: BigNumber;\n    onLogin: (method: LoginMethod) => void;\n    onLogout: () => void;\n    onStart: () => void;\n    starting: boolean;\n    onClaim: () => void;\n    claiming: boolean;\n}\n\nexport interface Auth {\n    id: string;\n    amount: string;\n    signature: Signature;\n}\n\nexport interface Signature {\n    v: number;\n    r: string;\n    s: string;\n}\n\nexport type LoginMethod = \"twitter\" | \"discord\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLevxDistributionState: () => LevxDistributionState = () => {\n    const { isLoading, user, isAuthenticated, loginWithRedirect, logout, getAccessTokenSilently } = useAuth0();\n    const { signer } = useContext(EthersContext);\n    const [authenticating, setAuthenticating] = useState(false);\n    const [auth, setAuth] = useState<Auth>();\n    const [pendingAmount, setPendingAmount] = useState<BigNumber>();\n    const [claimedAmount, setClaimedAmount] = useState<BigNumber>();\n    const [starting, setStarting] = useState(false);\n    const [claiming, setClaiming] = useState(false);\n    const [lastUpdated, setLastUpdated] = useState(0);\n\n    useAsyncEffect(async () => {\n        if (isAuthenticated && signer) {\n            if (window.location.search) {\n                window.history.replaceState({}, \"\", getRedirectUri());\n            }\n            setAuth(undefined);\n            setPendingAmount(undefined);\n            setAuthenticating(true);\n            try {\n                const accessToken = await getAccessTokenSilently({ scope: \"openid profile email\" });\n                const resp = await fetch(API_SERVER + `/auth?access_token=${accessToken}`);\n                if (resp.status === 200) {\n                    const data = await resp.json();\n                    setAuth(data);\n                    // Load events\n                    const contract = getContract(signer);\n                    const start = contract.filters.Start(data.id);\n                    const events = await contract.queryFilter(start, receipt.blockNumber);\n                    // TODO\n                    if (events.length > 0) {\n                        setPendingAmount(await contract.pendingAmount(data.id, 0));\n                        const claim = contract.filters.Claim(data.id);\n                        setClaimedAmount(\n                            (await contract.queryFilter(claim, receipt.blockNumber))\n                                .map(event => event.args.amount)\n                                .reduce((prev, current) => prev.add(current), BigNumber.from(\"0\"))\n                        );\n                    }\n                    // setPendingAmount(utils.parseEther(\"0.1\"));\n                    // setClaimedAmount(utils.parseEther(\"0.3\"));\n                }\n            } finally {\n                setAuthenticating(false);\n            }\n        }\n    }, [isAuthenticated, signer, lastUpdated]);\n\n    const onLogin = async (method: LoginMethod) => {\n        await loginWithRedirect({ connection: method, redirectUri: getRedirectUri() });\n    };\n\n    const onLogout = async () => {\n        await logout({ returnTo: getRedirectUri() });\n    };\n\n    const onStart = async () => {\n        if (signer && auth) {\n            try {\n                setStarting(true);\n                const contract = getContract(signer);\n                const { v, r, s } = auth.signature;\n                const tx = await contract.start(auth.id, utils.parseEther(auth.amount), v, r, s);\n                await tx.wait();\n                setLastUpdated(Date.now());\n            } finally {\n                setStarting(false);\n            }\n        }\n    };\n\n    const onClaim = async () => {\n        if (signer && auth) {\n            try {\n                setClaiming(true);\n                const contract = getContract(signer);\n                const tx = await contract.claim(auth.id, 0, constants.AddressZero, \"0x\");\n                await tx.wait();\n                setLastUpdated(Date.now());\n            } finally {\n                setClaiming(false);\n            }\n        }\n    };\n\n    return {\n        loading: isLoading,\n        authenticating,\n        user,\n        loginMethod: getLoginMethod(user),\n        auth,\n        pendingAmount,\n        claimedAmount,\n        onLogin,\n        onLogout,\n        onStart,\n        starting,\n        onClaim,\n        claiming\n    };\n};\n\nconst getRedirectUri = () => {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port === \"80\" ? \"\" : \":\" + port) + \"/#/airdrops/levx\";\n};\n\nconst getLoginMethod = (user?: User): LoginMethod | undefined => {\n    const split = user?.sub?.split(\"|\");\n    if (split) {\n        const provider = split[0];\n        if (provider === \"twitter\") return \"twitter\";\n        else if (provider === \"oauth2\") return split[1].split(\"|\")[0] as LoginMethod;\n    }\n};\n\nconst getContract = (signer: providers.JsonRpcSigner) => {\n    return (new Contract(address, abi, signer) as unknown) as LevxStreaming;\n};\n\nexport default useLevxDistributionState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { utils } from \"ethers\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AirdropsSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLevxDistributionState, { LevxDistributionState } from \"../hooks/useLevxDistributionState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Screen from \"./Screen\";\n\nconst LevxDistributionScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"levx-distribution\")} />\n                    <Text light={true}>{t(\"levx-distribution-desc\")}</Text>\n                    <LevxDistribution />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AirdropsSubMenu />\n        </Screen>\n    );\n};\n\nconst LevxDistribution = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useLevxDistributionState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {state.loading ? <Loading /> : state.user ? <LoginInfo state={state} /> : <SignInButtons state={state} />}\n        </View>\n    );\n};\n\nconst LoginInfo = ({ state }: { state: LevxDistributionState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading\n                text={t(\"welcome-\", { name: state.user!.name })}\n                buttonText={t(\"sign-out\")}\n                onPressButton={state.onLogout}\n            />\n            {state.authenticating ? (\n                <Loading />\n            ) : state.pendingAmount ? (\n                <Claim state={state} />\n            ) : (\n                <DistributionInfo state={state} />\n            )}\n        </View>\n    );\n};\n\nconst Claim = ({ state }: { state: LevxDistributionState }) => {\n    const t = useTranslation();\n    const { secondary } = useColors();\n    return (\n        <View>\n            <Text caption={true} light={true}>\n                {t(\"pending-amount\")}\n            </Text>\n            <AmountMeta amount={utils.formatEther(state.pendingAmount!)} suffix={\"LEVX\"} />\n            <Text light={true} style={{ marginTop: Spacing.small }}>\n                {t(\"claim-streaming-desc\", {\n                    full: state.auth!.amount,\n                    claimed: utils.formatEther(state.claimedAmount || \"0\")\n                })}\n            </Text>\n            <Button\n                type={\"outline\"}\n                color={secondary}\n                title={t(\"claim-streaming\")}\n                loading={state.claiming}\n                onPress={state.onClaim}\n                style={{ marginTop: Spacing.normal }}\n            />\n        </View>\n    );\n};\n\nconst DistributionInfo = ({ state }: { state: LevxDistributionState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Text caption={true} light={true}>\n                {t(\"you-can-receive\")}\n            </Text>\n            {state.auth ? <Eligible state={state} /> : <NotEligible />}\n        </View>\n    );\n};\n\nconst Eligible = ({ state }: { state: LevxDistributionState }) => {\n    const auth = state.auth!;\n    const t = useTranslation();\n    const { secondary } = useColors();\n    const [tweeted, setTweeted] = useState(false);\n    return (\n        <View>\n            <AmountMeta amount={auth.amount} suffix={\"LEVX\"} />\n            {tweeted ? (\n                <>\n                    <Button\n                        color={secondary}\n                        title={t(\"start-streaming\")}\n                        loading={state.starting}\n                        onPress={state.onStart}\n                    />\n                    <Notice color={\"orange\"} text={t(\"start-streaming-warning\")} style={{ marginTop: Spacing.small }} />\n                </>\n            ) : (\n                <>\n                    <Text light={true} style={{ marginTop: Spacing.small }}>\n                        {t(\"tweet-about-distribution\")}\n                    </Text>\n                    <TweetButton amount={auth.amount} setTweeted={setTweeted} />\n                </>\n            )}\n        </View>\n    );\n};\n\nconst TweetButton = ({ amount, setTweeted }) => {\n    const { twitter } = useColors();\n    const t = useTranslation();\n    const onTweet = () => {\n        window.open(\n            \"https://twitter.com/intent/tweet?text=\" +\n                encodeURIComponent(t(\"tweet-content\", { amount })) +\n                \"&url=\" +\n                encodeURIComponent(\"https://twitter.com/LevxApp/status/1505646396912795653\"),\n            \"_blank\"\n        );\n        setTweeted(true);\n    };\n    return (\n        <Button\n            icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n            title={t(\"tweet\")}\n            color={twitter}\n            onPress={onTweet}\n            style={{ marginTop: Spacing.small }}\n        />\n    );\n};\n\nconst NotEligible = () => {\n    const t = useTranslation();\n    const { twitter, discord } = useColors();\n    const onTwitter = useLinker(\"https://twitter.com/LevxApp/status/1505646396912795653\", \"\", \"_blank\");\n    const onDiscord = useLinker(\n        \"https://discord.com/channels/740031904757317742/896610753212219432/955114282754899988\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <View>\n            <AmountMeta amount={\"0\"} suffix={\"LEVX\"} />\n            <Text light={true} style={{ marginTop: Spacing.small }}>\n                {t(\"unfortunately-not-eligible\")}\n            </Text>\n            <Button\n                icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n                title={t(\"check-tweet\")}\n                color={twitter}\n                onPress={onTwitter}\n                style={{ marginTop: Spacing.small }}\n            />\n            <Button\n                icon={{ type: \"material-community\", name: \"discord\", color: \"white\", size: 20 }}\n                title={t(\"go-to-discord\")}\n                color={discord}\n                onPress={onDiscord}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst SignInButtons = ({ state }: { state: LevxDistributionState }) => {\n    const t = useTranslation();\n    const { twitter, discord } = useColors();\n    return (\n        <View style={{ marginVertical: Spacing.normal }}>\n            <Heading text={t(\"sign-in-with-twitter-or-discord\")} />\n            <Button\n                title={t(\"sign-in-with-twitter\")}\n                color={twitter}\n                icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n                style={{ marginBottom: Spacing.small }}\n                onPress={() => state.onLogin(\"twitter\")}\n            />\n            <Button\n                title={t(\"sign-in-with-discord\")}\n                color={discord}\n                icon={{ type: \"material-community\", name: \"discord\", color: \"white\", size: 20 }}\n                onPress={() => state.onLogin(\"discord\")}\n            />\n        </View>\n    );\n};\n\nexport default LevxDistributionScreen;\n"],"sourceRoot":""}
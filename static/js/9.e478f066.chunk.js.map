{"version":3,"sources":["src/components/Heading.tsx","src/components/ChangeNetwork.tsx","src/components/AmountMeta.tsx","src/components/Border.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","AmountMeta","textDark","textLight","placeholder","normal","amount","suffix","Border","border","width","backgroundColor","marginTop","InsufficientBalanceButton","symbol","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","FetchingButton","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","useStyles","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","useCallback","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","containerStyle","paddingTop","hideMaxButton","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","a","async","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","leave","useStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","undefined","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"uFAAA,6DA2CeA,IAzBmB,SAAAC,GAAU,IAChCC,EAAWC,cAAXD,OACR,OACI,kBAAC,IAAD,CAAUE,MAAO,CAAEC,WAAY,WAAYC,OAAQ,GAAIC,aAAcN,EAAMO,SAAW,EAAIC,IAAQC,QAC9F,kBAAC,IAAD,CACIC,QAAQ,EACRC,WAAYX,EAAMW,YAAc,OAChCJ,SAAUP,EAAMO,SAChBJ,MAAO,CAAC,CAAES,KAAM,EAAGC,SAAUC,IAAa,GAAK,GAAIC,cAAeP,IAAQQ,MAAQhB,EAAMG,QACvFH,EAAMiB,MAEVjB,EAAMkB,YACH,kBAAC,IAAD,CACIC,KAAM,QACNC,KAAM,QACNC,MAAOrB,EAAMkB,WACbI,QAAStB,EAAMuB,cACfC,MAAOvB,EACPwB,YAAa,CAAEC,kBAAmBlB,IAAQQ,W,kCCpC9D,mDAsBeW,IAfO,SAAC,GAAqB,IAAD,IAAlBC,eAAkB,MAAR,EAAQ,EACjCC,EAAIC,cACJC,EAAc,CAChBC,EAAG,UACHC,GAAI,SACNL,GACF,OACI,kBAAC,IAAD,CAAMzB,MAAO,CAAES,KAAM,EAAGR,WAAY,SAAU8B,eAAgB,WAC1D,kBAAC,IAAD,CAAMC,OAAO,EAAMhC,MAAO,CAAEiC,UAAW,SAAUC,eAAgB7B,IAAQ8B,QACpET,EAAE,oBAAqB,CAAEE,oB,kCChB1C,oDA4BeQ,IAfyB,SAAAvC,GACpC,IAAM6B,EAAIC,cADmC,EAEA5B,cAArCsC,EAFqC,EAErCA,SAAUC,EAF2B,EAE3BA,UAAWC,EAFgB,EAEhBA,YAC7B,OACI,kBAAC,IAAD,CACIvC,MAAO,CACHU,SAAUC,IAAa,GAAK,GAC5BR,aAAcE,IAAQmC,OACtBnB,MAAOxB,EAAMO,SAAWmC,EAAc1C,EAAM4C,OAASJ,EAAWC,IAEnEzC,EAAMO,SAAWsB,EAAE,OAAS7B,EAAM4C,OAAS5C,EAAM4C,OAAS,KAAO5C,EAAM6C,QAAU,IAAMhB,EAAE,e,kCCvBtG,2CAqBeiB,IAfA,SAAA9C,GAAU,IACb+C,EAAW7C,cAAX6C,OACR,OACI,kBAAC,IAAD,CACI5C,MAAO,CACHE,OAAQ,EACR2C,MAAO,OACPC,gBAAiBF,EACjBG,UAAWlD,EAAMS,MAAQD,IAAQQ,KAAOR,IAAQC,MAChDH,aAAcN,EAAMS,MAAQD,IAAQQ,KAAOR,IAAQC,MAAQD,IAAQQ,U,kCCfnF,qCASemC,IAJmB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAC3BvB,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQT,MAAO+B,EAASvB,EAAE,gBAAiB,CAAEuB,WAAYvB,EAAE,wBAAyBtB,UAAU,M,kCCPzG,2CA2Be8C,IApBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjB,kBAAC,IAAD,CACInD,MAAO,CACHoD,YAAa,MACbC,YAAa,EACbR,MAAO,OACPS,QAASjD,IAAQQ,KACjBkC,UAAW1C,IAAQC,QAEtB6C,EAAMI,MACH,kBAAC,IAAD,CAAM/C,WAAY,OAAQR,MAAO,CAAEqB,MAAO,MAAOX,SAAU,KAA3D,cACgByC,EAAMI,MAG1B,kBAAC,IAAD,CAAMC,MAAM,EAAMxD,MAAO,CAAEqB,MAAO,MAAOX,SAAU,KAC9CyC,EAAMM,Y,kCCtBnB,qCASeC,IAJQ,WACnB,IAAMhC,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQT,MAAOQ,EAAE,YAAatB,UAAU,M,+rBCqBpCuD,IApBC,SAAC9D,GAAyC,IAC9C+D,EAAaC,qBAAWC,KAAxBF,SAD6C,EAEb7D,cAAhCgE,EAF6C,EAE7CA,gBAAiBC,EAF4B,EAE5BA,WACjBpB,EAAWqB,cAAXrB,OACR,OACI,kBAAC,IAAD,OACQ/C,EADR,CAEIG,MAAO,CAAC,EAAD,KAEI4C,EAAO,CAAEvB,MAAOuC,EAAWI,EAAaD,KAF5C,IAGCjB,gBAAiBiB,EACjBhB,UAAW1C,IAAQmC,OAASnC,IAAQC,MACpCgD,QAASjD,IAAQC,MAAQD,IAAQQ,OAErChB,EAAMG,Y,kCCtBtB,qEA4CekE,IA1BA,SAACrE,GAAwB,IAC5ByC,EAAcvC,cAAduC,UAEF6B,GAAcvB,EADDqB,cAAXrB,QACmB,CAAEvB,MAAOxB,EAAMwB,QACpCA,EAAQxB,EAAMwB,OAASiB,EAC7B,OACI,kBAAC,IAAD,CAAMtC,MAAO,CAACH,EAAMuE,MAAQ,GAAKD,EAAatE,EAAMG,QAChD,kBAAC,IAAD,CAAMwD,MAAM,EAAMxD,MAAO,CAAEqB,UACtBxB,EAAMiB,MAEVjB,EAAMkB,YAAclB,EAAMuB,eACvB,kBAAC,IAAD,CACIF,MAAOrB,EAAMkB,WACbC,KAAM,QACNC,KAAM,QACNT,WAAY,OACZW,QAAStB,EAAMuB,cACfiD,WAAY,CAAEhD,SACdC,YAAa,CAAEC,kBAAmB,EAAG+C,gBAAiB,GACtDtE,MAAO,CAAEuE,UAAW,WAAYxB,UAAW1C,IAAQQ,W,2tBCZvE,IAkDM2D,EAAY,SAAC3E,GAAmE,IAC1EC,EAAWC,cAAXD,OACF2E,EAAaC,uBAAY,WAC3B,GAAI7E,EAAM8E,MAAO,CACb,IAAIC,EAAU/E,EAAM8E,MAAMC,QAC1B,GAAIC,YAAMhF,EAAM8E,OAAQ,CAEpB,IAAMG,EAAMC,YAAM,IAClBH,EAAUA,EAAQI,GAAGF,GAAOF,EAAQK,IAAIH,GAAOI,SAAOC,UAAUC,KAEpEvF,EAAMwF,aAAaC,YAAcV,EAAS/E,EAAM8E,MAAMY,cAE3D,CAAC1F,EAAM8E,MAAO9E,EAAMwF,eACvB,OACI,kBAAC,IAAD,CAAMrF,MAAO,CAAEwF,SAAU,WAAYC,MAAO,GAAIC,OAAwB,QAAhBC,IAASC,GAAe,GAAK,KACjF,kBAAC,IAAD,CACI5E,KAAM,QACNC,KAAM,QACNI,MAAOvB,EACPoB,MAAOrB,EAAMgG,gBAAkBlF,IAAa,OAASd,EAAM8E,MAAM1B,OAAS,OAC1EzC,WAAY,OACZW,QAASsD,EACTnD,YAAa,CAAEC,kBAAmBlB,IAAQQ,UAM3CiF,IA9EyB,SAAAjG,GAAU,IAAD,IACrC+C,EAAWqB,cAAXrB,OACFmD,EAAerB,uBACjB,SAAC5D,GACG,GAAIjB,EAAM8E,OAAS9E,EAAMmG,gBACrB,IACIC,YAAanF,EAAMjB,EAAM8E,MAAMY,UAC/B1F,EAAMmG,gBAAgBlF,GACxB,MAAOoF,GACDpF,EAAKqF,SAAS,MAAQrF,EAAKsF,QAAQ,OAAStF,EAAKuF,OAAS,GAC1DxG,EAAMmG,gBAAgBlF,MAKtC,CAACjB,EAAM8E,MAAO9E,EAAMmG,kBAExB,OACI,kBAAC,IAAD,KACKnG,EAAMqB,OAAS,kBAAC,IAAD,CAASJ,KAAMjB,EAAMqB,QACrC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIoF,MAAOzG,EAAMyG,MACbC,MAAO1G,EAAM4C,OACbsD,aAAcA,EACdxD,YAAa,MACbiE,aAAc,UACdC,UAAW5G,EAAM4G,YAAa,EAC9BC,WAAY,CAAEC,iBAAkBtG,IAAQQ,MACxC+F,oBAAqB,CAAEC,kBAAmB,GAC1CC,WAAY,CAAEC,WAAY,QAAS7G,OAAQL,EAAMyG,MAAQ,OAAS,GAClEU,eAAc,OACPpE,KADO,IAEVrB,kBAAmBlB,IAAQQ,KAC3BoG,WAAY,GACZrG,cAAe,OAGtB,SAAAf,EAAM8E,QAAN,WAAaC,cAAb,IAAsBI,GAAG,MAAOnF,EAAMqH,eACnC,kBAAC1C,EAAD,CACIG,MAAO9E,EAAM8E,MACbkB,cAAehG,EAAMgG,cACrBR,aAAcxF,EAAMmG,sB,6FCC7BmB,IAhDe,SAAAtH,GAAU,IAAD,EACSE,cAApCsC,EAD2B,EAC3BA,SAAU+E,EADiB,EACjBA,WAAY9E,EADK,EACLA,UACxBrB,EAAOpB,EAAMoB,MAAQ,SACrBI,EAAQxB,EAAMwB,OAASgB,EACvB3B,EAAoB,UAATO,EAAmB,GAAc,UAATA,EAAmB,GAAK,GAC3D8E,EAAerB,uBACjB,SAAC5D,GACG,MAAAjB,EAAMkG,cAANlG,EAAMkG,aAAejF,GACrB,MAAAjB,EAAMwH,SAANxH,EAAMwH,QAAU,IAChB,IAAMC,EAAS,GACF,KAATxG,GAAejB,EAAM0H,WACrB1H,EAAM0H,UAAUC,SAAQ,SAAAC,GAChB3G,EAAK4G,MAAMD,EAAWE,SACtBL,EAAOM,KAAKH,EAAWtE,UAItB,KAATrC,GAAejB,EAAMgI,SACrBhI,EAAMgI,QAAQL,SAAQ,SAAAC,GACb3G,EAAK4G,MAAMD,EAAWE,SACvBL,EAAOM,KAAKH,EAAWtE,UAI/BmE,EAAOjB,OAAS,IAChB,MAAAxG,EAAMwH,SAANxH,EAAMwH,QAAUC,EAAOQ,KAAK,UAGpC,CAACjI,EAAMkG,aAAclG,EAAMwH,QAASxH,EAAM0H,UAAW1H,EAAMgI,UAE/D,OACI,kBAAC,IAAD,OACQhI,EADR,CAEI6G,WAAY,CACR,CAAEhG,WAAUqG,WAAY,UAAWnG,cAAe,EAAGS,QAAO0B,UAAW,EAAGgF,UAAW,IAErE,QAAhBpC,IAASC,GAAe,CAAEoC,QAAS,QAAW,GAC9CnI,EAAM6G,YAEVI,WAAY,CAAC,CAAEzF,MAAO+F,GAAcvH,EAAMiH,YAC1CmB,qBAAsBpI,EAAMoI,sBAAwB3F,EACpD4F,WAAYrI,EAAMwH,QAAU,CAAEnH,OAAQ,GAAML,EAAMqI,WAClDlB,eAAgB,CAAC,CAAEzF,kBAAmB,GAAK1B,EAAMmH,gBACjDjB,aAAcA,O,0IC/BXoC,EAzBK,WAmBhB,MAAO,CACHC,MAnBU1D,uBAAY,SAAOjC,EAA0B4F,GAAjC,mBAAAC,EAAAC,OAAA,uDAChBC,EAAWC,YAAY,WAAYC,IAAWL,GAD9B,WAAAC,EAAA,MAECE,EAASG,YAAYP,MAAM3F,IAF5B,cAEhBmG,EAFgB,kBAAAN,EAAA,MAGLE,EAASJ,MAAM3F,EAAQ,CACpCmG,SAAUA,EAASC,IAAI,KAAKC,IAAI,QAJd,cAGhBC,EAHgB,yBAMfC,YAAeD,EAAI,mBAAoBtG,EAAOwG,aAN/B,8DAOvB,IAaCC,MAXUxE,uBAAY,SAAOjC,EAA0B4F,GAAjC,mBAAAC,EAAAC,OAAA,uDAChBC,EAAWC,YAAY,WAAYC,IAAWL,GAD9B,WAAAC,EAAA,MAECE,EAASG,YAAYO,MAAMzG,IAF5B,cAEhBmG,EAFgB,kBAAAN,EAAA,MAGLE,EAASU,MAAMzG,EAAQ,CACpCmG,SAAUA,EAASC,IAAI,KAAKC,IAAI,QAJd,cAGhBC,EAHgB,yBAMfC,YAAeD,EAAI,mBAAoBtG,EAAOwG,aAN/B,8DAOvB,MC4GQE,IAnG6B,WAAO,IAAD,EACuBtF,qBAAWuF,KAAxEf,EADsC,EACtCA,OAAQgB,EAD8B,EAC9BA,QAASC,EADqB,EACrBA,kBAAmBC,EADE,EACFA,OAAQC,EADN,EACMA,aADN,EAErBrB,IAAjBC,EAFsC,EAEtCA,MAAOc,EAF+B,EAE/BA,MAF+B,EAGRO,qBAHQ,WAGvCC,EAHuC,KAG1BC,EAH0B,OAIRF,qBAJQ,WAIvCG,EAJuC,KAI1BC,EAJ0B,OAKNJ,qBALM,WAKvCK,EALuC,KAKzBC,EALyB,OAMlBN,mBAAS,IANS,WAMvChH,EANuC,KAM/BuH,EAN+B,OAONP,oBAAS,GAPH,WAOvCQ,EAPuC,KAOzBC,EAPyB,OAQJT,oBAAS,GARL,WAQvCU,EARuC,KAQxBC,EARwB,OAShBX,oBAAS,GATO,WASvCY,EATuC,KAS9BC,EAT8B,OAUdb,oBAAS,GAVK,WAUvCc,EAVuC,KAU7BC,EAV6B,OAWhBf,oBAAS,GAXO,WAWvCgB,EAXuC,KAW9BC,EAX8B,KAaxCC,GAAQC,mBAAQ,kBAAMrB,EAAOsB,MAAK,SAAAlG,GAAK,MAAqB,UAAjBA,EAAM1B,YAAqB,CAACsG,IACvEuB,GAASF,mBAAQ,kBAAMrB,EAAOsB,MAAK,SAAAlG,GAAK,MAAqB,WAAjBA,EAAM1B,YAAsB,CAACsG,IAE/EwB,qBAAU,WACNf,EAAU,MACX,CAACX,IAEJ2B,KAAe,kCAAA1C,EAAAC,OAAA,qDACPoC,IAASG,IAAUzC,GADZ,wBAEP6B,GAAgB,GAChBE,GAAiB,GACjBE,GAAW,GAJJ,SAMGW,EAAe/F,SAAOgG,UAAUC,KAAK,GACtCC,IAAI,IACJnG,IAAI,GARN,WAAAqD,EAAA,MAS0BgB,EAAkBqB,GAAMtB,QAASX,MAT3D,cASG2C,EATH,OAUHnB,EAAgBhF,SAAOgG,UAAUC,KAAKE,GAAgBC,IAAIL,IAVvD,YAAA3C,EAAA,MAW2BgB,EAAkBwB,GAAOzB,QAASX,MAX7D,eAWG6C,EAXH,OAYHnB,EAAiBlF,SAAOgG,UAAUC,KAAKI,GAAiBD,IAAIL,IAEtDO,EAAgB/C,YAAY,QAASkC,GAAMtB,QAAShB,GAdvD,KAeHsB,EAfG,YAAArB,EAAA,MAekBkD,EAAcC,UAAU/C,MAf1C,+CAgBHmB,EAhBG,YAAAvB,EAAA,MAgBkBkD,EAAcE,eAhBhC,0CAiBGC,EAAiBlD,YAAY,QAASqC,GAAOzB,QAAShB,GAjBzD,KAkBH0B,EAlBG,YAAAzB,EAAA,MAkBmBqD,EAAeD,eAlBlC,4DAoBHpB,GAAW,GApBR,oFAuBZ,CAACK,GAAOG,GAAQzC,IAEnB,IAAMuD,GAAUlH,uBAAY,4BAAA4D,EAAAC,OAAA,qDACpB9F,GAAUkI,IAAStC,GADC,wBAEpBmC,GAAY,GAFQ,SAIVqB,EAAS5F,YAAaxD,EAAQkI,GAAMpF,UAJ1B,WAAA+C,EAAA,MAKCF,EAAMyD,EAAQxD,IALf,YAKVU,EALU,4CAAAT,EAAA,MAONS,EAAG+C,QAPG,2BAAAxD,EAAA,MAQNkB,KARM,QASZQ,EAAU,IATE,yBAYhBQ,GAAY,GAZI,oFAezB,CAAC/H,EAAQkI,GAAOtC,IAEb0D,GAAUrH,uBAAY,4BAAA4D,EAAAC,OAAA,qDACpB9F,GAAUqI,IAAUzC,GADA,wBAEpBqC,GAAW,GAFS,SAIVmB,EAAS5F,YAAaxD,EAAQqI,GAAOvF,UAJ3B,WAAA+C,EAAA,MAKCY,EAAM2C,EAAQxD,IALf,YAKVU,EALU,4CAAAT,EAAA,MAONS,EAAG+C,QAPG,2BAAAxD,EAAA,MAQNkB,KARM,QASZQ,EAAU,IATE,yBAYhBU,GAAW,GAZK,oFAezB,CAACjI,EAAQqI,GAAQzC,IAEpB,MAAO,CACHsC,SACAG,UACApB,cACAE,cACAE,eACArH,SACAuH,YACAC,eACAC,kBACAC,gBACAC,mBACAC,UACAuB,WACArB,WACAwB,WACAtB,a,0UCjFFuB,EAAU,WAAO,IACXvK,EAAYoC,qBAAWuF,KAAvB3H,QACFC,EAAIC,cACJsK,EAAQ9C,cACd,OAAgB,IAAZ1H,EAAsB,kBAAC,IAAD,MAEtB,kBAAC,IAAD,CAAMzB,MAAO,CAAE+C,UAAW1C,IAAQ8B,QAC9B,kBAAC+J,EAAD,CAAeD,MAAOA,IACtB,kBAAC,IAAD,MACA,kBAACE,EAAD,CAAaF,MAAOA,IACnBA,EAAMnB,QAAUmB,EAAMnB,OAAOlG,QAAQwH,UAClC,kBAAC,IAAD,CAAQtL,KAAMY,EAAE,wBAAyBL,MAAO,SAAUrB,MAAO,CAAE+C,UAAW1C,IAAQC,SAE1F,kBAAC+L,EAAD,CAAaJ,MAAOA,MAK1BC,EAAgB,SAAC,GAAwC,IAAtCD,EAAqC,EAArCA,MACfvK,EAAIC,cACV,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASb,KAAMY,EAAE,iBACjB,kBAAC,IAAD,CACIe,OAAQwJ,EAAMnB,OAASxF,YAAc2G,EAAMnB,OAAOlG,QAASqH,EAAMnB,OAAOvF,UAAY,GACpF7C,OAAQ,aAMlByJ,EAAc,SAAC,GAAwC,IAAtCF,EAAqC,EAArCA,MACbvK,EAAIC,cACV,OAAKsK,EAAMnB,QAAUmB,EAAMnB,OAAOlG,QAAQwH,SAC/B,kBAAC,IAAD,CAAStL,KAAMY,EAAE,qBAAsBtB,UAAU,IAGxD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASU,KAAMY,EAAE,uBACjB,kBAAC,IAAD,CACIiD,MAAOsH,EAAMnB,OACbrI,OAAQwJ,EAAMxJ,OACduD,gBAAiBiG,EAAMjC,UACvBvD,UAAW9F,QAMrB0L,EAAc,SAAC,GAAwC,IAAtCJ,EAAqC,EAArCA,MACb7L,GACD6L,EAAMtB,QAAUsB,EAAMnB,SAAWmB,EAAMvC,cAAgBuC,EAAMnC,cAAgBwC,YAAaL,EAAMxJ,QAC/F8J,EAAcnM,OACdoM,EACAvG,YAAagG,EAAMxJ,OAAQwJ,EAAMnB,OAAQvF,UACpCsD,IAAIoD,EAAMvC,aACVZ,IAAImD,EAAMnC,cACrB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIrH,OAAQ8J,EAAcjH,YAAciH,EAAaN,EAAMtB,MAAOpF,SAAU,GAAK,GAC7E7C,OAAQ,QACRtC,SAAUA,IAEd,kBAACqM,EAAD,CAAUR,MAAOA,MAKvBQ,EAAW,SAAC,GAAwC,IAAtCR,EAAqC,EAArCA,MAAqC,EAC3BxC,mBAAwB,IADG,WAC9CtG,EAD8C,KACvCuJ,EADuC,KAErD,OACI,kBAAC,IAAD,CAAM1M,MAAO,CAAE+C,UAAW1C,IAAQmC,UAC5ByJ,EAAMnB,QAAUmB,EAAMnB,OAAOlG,QAAQwH,UAAYE,YAAaL,EAAMxJ,QAClE,kBAACkK,EAAD,CAAeV,MAAOA,EAAO5E,QAASqF,EAAUtM,UAAU,IAC1D6F,YAAagG,EAAMxJ,OAAQwJ,EAAMnB,OAAOvF,UAAUP,GAAGiH,EAAMnB,OAAOlG,SAClE,kBAAC,IAAD,CAA2B3B,OAAQgJ,EAAMnB,OAAO7H,SAChDgJ,EAAM5B,QACN,kBAAC,IAAD,MAEA,kBAACsC,EAAD,CAAeV,MAAOA,EAAO5E,QAASqF,EAAUtM,UAAU,IAE7D+C,EAAMM,SAA0B,OAAfN,EAAMI,MAAiB,kBAAC,IAAD,CAAcJ,MAAOA,MAKpEwJ,EAAgB,SAAC,GAQhB,IAPHV,EAOE,EAPFA,MACA5E,EAME,EANFA,QACAjH,EAKE,EALFA,SAMMsB,EAAIC,cAUV,OAAO,kBAAC,IAAD,CAAQT,MAAOQ,EAAE,WAAY2I,QAAS4B,EAAMxB,QAAStJ,QAT5C,oBAAAmH,EAAAC,OAAA,uDACZlB,EAAQ,IADI,oBAAAiB,EAAA,MAGF2D,EAAMF,WAHJ,OAIRE,EAAMjC,UAAU,IAJR,gDAMR3C,EAAQ,EAAD,IANC,iEAS8DjH,SAAUA,KAG7EwM,UA/HO,WAClB,IAAMlL,EAAIC,cACV,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOb,KAAMY,EAAE,aACf,kBAAC,IAAD,CAAMM,OAAO,GAAON,EAAE,iBACtB,kBAACsK,EAAD,OAEa,QAAhBrG,IAASC,IAAgB,kBAAC,IAAD,OAE9B,kBAAC,IAAD","file":"static/js/9.e478f066.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst UnstakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"unstake\")} />\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useStakingState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <XSushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.xSushi && state.xSushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-xsushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-xsushi\")} />\n            <AmountMeta\n                amount={state.xSushi ? formatBalance(state.xSushi.balance, state.xSushi.decimals) : \"\"}\n                suffix={\"xSUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-unstake\")} />\n            <TokenInput\n                token={state.xSushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\n    const sushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.xSushi!.decimals)\n              .mul(state.sushiStaked!)\n              .div(state.xSushiSupply!);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={sushiAmount ? formatBalance(sushiAmount, state.sushi!.decimals, 8) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default UnstakeScreen;\n"],"sourceRoot":""}
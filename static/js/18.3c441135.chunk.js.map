{"version":3,"sources":["src/components/ChangeNetwork.tsx","src/components/AmountMeta.tsx","src/components/Loading.tsx","src/hooks/useLevxPayoutsState.tsx","src/screens/LevxPayoutsScreen.tsx"],"names":["ChangeNetwork","chainId","t","useTranslation","networkName","1","42","style","flex","alignItems","justifyContent","light","textAlign","marginVertical","Spacing","large","AmountMeta","props","useColors","textDark","textLight","placeholder","fontSize","IS_DESKTOP","marginBottom","normal","color","disabled","amount","suffix","Loading","size","getContract","signer","Contract","address","abi","useLevxPayoutsState","useContext","EthersContext","useState","loading","setLoading","startEvent","setStartEvent","pendingAmount","setPendingAmount","claimedAmount","setClaimedAmount","claiming","setClaiming","lastUpdated","setLastUpdated","useAsyncEffect","a","async","undefined","contract","getAddress","account","start","filters","Start","queryFilter","receipt","blockNumber","events","length","id","args","claim","Claim","map","event","reduce","prev","current","add","BigNumber","from","onClaim","constants","AddressZero","tx","wait","Date","now","LevxPayouts","state","View","marginTop","secondary","endsAt","setEndsAt","getBlock","block","timestamp","duration","Text","caption","utils","formatEther","small","full","claimed","toLocaleString","Button","type","title","onPress","NoPayout","LevxPayoutsScreen","Screen","Container","BackgroundImage","Content","Title","text","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/18.3c441135.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { useContext, useState } from \"react\";\n\nimport { abi } from \"@levxdao/airdrop/artifacts/contracts/LevxPayout.sol/LevxPayout.json\";\nimport { address, receipt } from \"@levxdao/airdrop/deployments/mainnet/LevxPayout.json\";\nimport { LevxPayout } from \"@levxdao/airdrop/typechain/LevxPayout\";\nimport { BigNumber, constants, Contract, providers, Event } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nexport interface LevxPayoutsState {\n    loading: boolean;\n    startEvent?: Event;\n    pendingAmount?: BigNumber;\n    claimedAmount?: BigNumber;\n    onClaim: () => void;\n    claiming: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLevxPayoutsState: () => LevxPayoutsState = () => {\n    const { signer } = useContext(EthersContext);\n    const [loading, setLoading] = useState(true);\n    const [startEvent, setStartEvent] = useState<Event>();\n    const [pendingAmount, setPendingAmount] = useState<BigNumber>();\n    const [claimedAmount, setClaimedAmount] = useState<BigNumber>();\n    const [claiming, setClaiming] = useState(false);\n    const [lastUpdated, setLastUpdated] = useState(0);\n\n    useAsyncEffect(async () => {\n        if (signer) {\n            setLoading(true);\n            setStartEvent(undefined);\n            setPendingAmount(undefined);\n            setClaimedAmount(undefined);\n            try {\n                const contract = getContract(signer);\n                const account = await signer.getAddress();\n                const start = contract.filters.Start(null, null, account);\n                const events = await contract.queryFilter(start, receipt.blockNumber);\n                if (events.length > 0) {\n                    setStartEvent(events[0]);\n                    const { id } = events[0].args;\n                    setPendingAmount(await contract.pendingAmount(id));\n                    const claim = contract.filters.Claim(id);\n                    setClaimedAmount(\n                        (await contract.queryFilter(claim, receipt.blockNumber))\n                            .map(event => event.args.amount)\n                            .reduce((prev, current) => prev.add(current), BigNumber.from(\"0\"))\n                    );\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, lastUpdated]);\n\n    const onClaim = async () => {\n        if (signer && startEvent) {\n            try {\n                setClaiming(true);\n                const contract = getContract(signer);\n                const tx = await contract.claim(startEvent.args!.id, constants.AddressZero, \"0x\");\n                await tx.wait();\n                setLastUpdated(Date.now());\n            } finally {\n                setClaiming(false);\n            }\n        }\n    };\n\n    return {\n        loading,\n        startEvent,\n        pendingAmount,\n        claimedAmount,\n        onClaim,\n        claiming\n    };\n};\n\nconst getRedirectUri = () => {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port === \"80\" ? \"\" : \":\" + port) + \"/#/airdrops/levx\";\n};\n\nconst getContract = (signer: providers.JsonRpcSigner) => {\n    return (new Contract(address, abi, signer) as unknown) as LevxPayout;\n};\n\nexport default useLevxPayoutsState;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { utils } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AirdropsSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLevxPayoutsState, { LevxPayoutsState } from \"../hooks/useLevxPayoutsState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Screen from \"./Screen\";\n\nconst LevxPayoutsScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"levx-payouts\")} />\n                    <Text light={true}>{t(\"levx-payouts-desc\")}</Text>\n                    <LevxPayouts />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AirdropsSubMenu />\n        </Screen>\n    );\n};\n\nconst LevxPayouts = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useLevxPayoutsState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {state.loading ? <Loading /> : state.startEvent ? <Claim state={state} /> : <NoPayout state={state} />}\n        </View>\n    );\n};\n\nconst Claim = ({ state }: { state: LevxPayoutsState }) => {\n    const t = useTranslation();\n    const { secondary } = useColors();\n    const [endsAt, setEndsAt] = useState<Date>();\n    useAsyncEffect(async () => {\n        if (state.startEvent) {\n            const block = await state.startEvent.getBlock();\n            setEndsAt(new Date((block.timestamp + state.startEvent.args!.duration) * 1000));\n        }\n    }, [state.startEvent]);\n    return (\n        <View>\n            <Text caption={true} light={true}>\n                {t(\"pending-amount\")}\n            </Text>\n            <AmountMeta amount={utils.formatEther(state.pendingAmount!)} suffix={\"LEVX\"} />\n            <Text light={true} style={{ marginTop: Spacing.small }}>\n                {t(\"claim-payout-desc\", {\n                    full: utils.formatEther(state.startEvent!.args!.amount),\n                    claimed: utils.formatEther(state.claimedAmount || \"0\"),\n                    endsAt: endsAt?.toLocaleString() || \"\"\n                })}\n            </Text>\n            <Button\n                type={\"outline\"}\n                color={secondary}\n                title={t(\"claim-payout\")}\n                loading={state.claiming}\n                onPress={state.onClaim}\n                style={{ marginTop: Spacing.normal }}\n            />\n        </View>\n    );\n};\n\nconst NoPayout = ({ state }: { state: LevxPayoutsState }) => {\n    const t = useTranslation();\n    return <Button disabled={true} title={t(\"no-payout\")} />;\n};\n\nexport default LevxPayoutsScreen;\n"],"sourceRoot":""}
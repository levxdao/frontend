{"version":3,"sources":["src/components/Heading.tsx","src/components/ChangeNetwork.tsx","src/components/AmountMeta.tsx","src/components/Loading.tsx","src/constants/index.ts","src/hooks/useClaimZeroState.tsx","src/screens/ClaimZeroScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","AmountMeta","textDark","textLight","placeholder","normal","amount","suffix","Loading","TTL","ALLOWED_SLIPPAGE","Percent","FEE","API_SERVER","process","getRedirectUri","window","location","protocol","hostname","port","getContract","signer","Contract","address","abi","useClaimZeroState","useAuth0","isLoading","user","isAuthenticated","loginWithRedirect","logout","getAccessTokenSilently","useContext","EthersContext","useState","authenticating","setAuthenticating","auth","setAuth","error","setError","claimEvent","setClaimEvent","claiming","setClaiming","lastUpdated","setLastUpdated","useAsyncEffect","a","async","search","history","replaceState","undefined","scope","accessToken","getAddress","account","fetch","resp","status","json","data","console","log","id","JSON","stringify","contract","claim","filters","Claim","queryFilter","receipt","blockNumber","events","length","errors","message","loading","onLogin","connection","redirectUri","onLogout","returnTo","onClaim","signature","v","r","s","tx","wait","Date","now","ClaimZero","state","View","marginTop","LoginInfo","name","Claimed","primary","useLinker","transactionHash","Text","caption","Button","ClaimInfo","signedInUsingDiscord","sub","startsWith","Eligible","secondary","tweeted","setTweeted","TweetButton","twitter","icon","open","encodeURIComponent","NotEligible","discord","onTwitter","onDiscord","SignInButtons","tweetId","SignInWithTwitterButton","ClaimZeroScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"wFAAA,6DA2CeA,IAzBmB,SAAAC,GAAU,IAChCC,EAAWC,cAAXD,OACR,OACI,kBAAC,IAAD,CAAUE,MAAO,CAAEC,WAAY,WAAYC,OAAQ,GAAIC,aAAcN,EAAMO,SAAW,EAAIC,IAAQC,QAC9F,kBAAC,IAAD,CACIC,QAAQ,EACRC,WAAYX,EAAMW,YAAc,OAChCJ,SAAUP,EAAMO,SAChBJ,MAAO,CAAC,CAAES,KAAM,EAAGC,SAAUC,IAAa,GAAK,GAAIC,cAAeP,IAAQQ,MAAQhB,EAAMG,QACvFH,EAAMiB,MAEVjB,EAAMkB,YACH,kBAAC,IAAD,CACIC,KAAM,QACNC,KAAM,QACNC,MAAOrB,EAAMkB,WACbI,QAAStB,EAAMuB,cACfC,MAAOvB,EACPwB,YAAa,CAAEC,kBAAmBlB,IAAQQ,W,kCCpC9D,mDAsBeW,IAfO,SAAC,GAAqB,IAAD,IAAlBC,eAAkB,MAAR,EAAQ,EACjCC,EAAIC,cACJC,EAAc,CAChBC,EAAG,UACHC,GAAI,SACNL,GACF,OACI,kBAAC,IAAD,CAAMzB,MAAO,CAAES,KAAM,EAAGR,WAAY,SAAU8B,eAAgB,WAC1D,kBAAC,IAAD,CAAMC,OAAO,EAAMhC,MAAO,CAAEiC,UAAW,SAAUC,eAAgB7B,IAAQ8B,QACpET,EAAE,oBAAqB,CAAEE,oB,kCChB1C,oDA4BeQ,IAfyB,SAAAvC,GACpC,IAAM6B,EAAIC,cADmC,EAEA5B,cAArCsC,EAFqC,EAErCA,SAAUC,EAF2B,EAE3BA,UAAWC,EAFgB,EAEhBA,YAC7B,OACI,kBAAC,IAAD,CACIvC,MAAO,CACHU,SAAUC,IAAa,GAAK,GAC5BR,aAAcE,IAAQmC,OACtBnB,MAAOxB,EAAMO,SAAWmC,EAAc1C,EAAM4C,OAASJ,EAAWC,IAEnEzC,EAAMO,SAAWsB,EAAE,OAAS7B,EAAM4C,OAAS5C,EAAM4C,OAAS,KAAO5C,EAAM6C,QAAU,IAAMhB,EAAE,e,kCCvBtG,oCAOeiB,IAFC,kBAAM,kBAAC,IAAD,CAAmB1B,KAAM,QAASjB,MAAO,CAAEkC,eAAgB7B,IAAQ8B,W,mCCLzF,gKAEaS,EAAM,KACNC,EAAmB,IAAIC,IAAQ,KAAM,SACrCC,EAAM,IAAID,IAAQ,IAAK,QACvBE,EAAsC,gBAAzBC,GAAA,goBAAW,cAA6B,0BAA4B,0B,wUCyHxFC,EAAiB,WAAO,IAAD,EACYC,OAAOC,SAApCC,EADiB,EACjBA,SAAUC,EADO,EACPA,SAAUC,EADH,EACGA,KAC5B,OAAOF,EAAW,KAAOC,GAAqB,OAATC,EAAgB,GAAK,IAAMA,GAAQ,iBAGtEC,EAAc,SAACC,GACjB,OAAQ,IAAIC,WAASC,IAASC,IAAKH,IAGxBI,EAjGiC,WAAO,IAAD,EAC8CC,cAAxFC,EAD0C,EAC1CA,UAAWC,EAD+B,EAC/BA,KAAMC,EADyB,EACzBA,gBAAiBC,EADQ,EACRA,kBAAmBC,EADX,EACWA,OAAQC,EADnB,EACmBA,uBAC7DX,EAAWY,qBAAWC,KAAtBb,OAF0C,EAGNc,oBAAS,GAHH,WAG3CC,EAH2C,KAG3BC,EAH2B,OAI1BF,qBAJ0B,WAI3CG,EAJ2C,KAIrCC,EAJqC,OAKxBJ,mBAAS,IALe,WAK3CK,EAL2C,KAKpCC,EALoC,OAMdN,qBANc,WAM3CO,EAN2C,KAM/BC,EAN+B,OAOlBR,oBAAS,GAPS,WAO3CS,EAP2C,KAOjCC,EAPiC,OAQZV,mBAAS,GARG,WAQ3CW,EAR2C,KAQ9BC,EAR8B,KAWlDC,KAAe,4CAAAC,EAAAC,OAAA,oDACPrB,IAAmBR,EADZ,wBAEHN,OAAOC,SAASmC,QAChBpC,OAAOqC,QAAQC,aAAa,GAAI,GAAIvC,KAExCyB,OAAQe,GACRjB,GAAkB,GAClBI,EAAS,IACTE,OAAcW,GARP,oBAAAL,EAAA,MAUuBjB,EAAuB,CAAEuB,MAAO,0BAVvD,cAUGC,EAVH,mBAAAP,EAAA,MAWmB5B,EAAOoC,cAX1B,eAWGC,EAXH,mBAAAT,EAAA,MAYgBU,MAAM/C,IAAU,2BAA8B4C,EAA9B,YAAqDE,IAZrF,WAaiB,OADdE,EAZH,QAaMC,OAbN,oCAAAZ,EAAA,MAcoBW,EAAKE,QAdzB,eAcOC,EAdP,OAeCxB,EAAQwB,GACJA,IAEAC,QAAQC,IAAI,OAASF,EAAKG,IAE1BF,QAAQC,IAAI,YAAcF,EAAKxC,SAE/ByC,QAAQC,IAAI,SAAWE,KAAKC,UAAUL,EAAKnC,QAGzCyC,EAAWjD,EAAYC,GACvBiD,EAAQD,EAASE,QAAQC,MAAMT,EAAKG,IA1B3C,YAAAjB,EAAA,MA2BsBoB,EAASI,YAAYH,EAAOI,IAAQC,cA3B1D,SA2BOC,EA3BP,QA4BYC,OAAS,GAChBlC,EAAciC,EAAO,IA7B1B,2CAAA3B,EAAA,MAgCoBW,EAAKE,QAhCzB,QAgCOC,EAhCP,OAiCCtB,GAAS,SAAAsB,EAAKe,SAAL,WAAc,SAAd,IAAkBC,UAAW,IAjCvC,yBAoCH1C,GAAkB,GApCf,oFAuCZ,CAACR,EAAiBR,EAAQyB,IAwB7B,MAAO,CACHkC,QAASrD,EACTS,iBACAR,OACAU,OACAE,QACAE,aACAuC,QA7BY,oBAAAhC,EAAAC,OAAA,kEAAAD,EAAA,MACNnB,EAAkB,CAAEoD,WAAY,UAAWC,YAAarE,OADlD,6DA8BZsE,SA1Ba,oBAAAnC,EAAAC,OAAA,kEAAAD,EAAA,MACPlB,EAAO,CAAEsD,SAAUvE,OADZ,6DA2BbwE,QAvBY,4BAAArC,EAAAC,OAAA,oDACR7B,IAAUiB,EADF,iCAGJO,GAAY,GACNwB,EAAWjD,EAAYC,GAJzB,WAAA4B,EAAA,MAKaoB,EAASC,MAAMhC,EAAK4B,GAAI5B,EAAKiD,UAAUC,EAAGlD,EAAKiD,UAAUE,EAAGnD,EAAKiD,UAAUG,IALxF,cAKEC,EALF,kBAAA1C,EAAA,MAME0C,EAAGC,QANL,OAOJ7C,EAAe8C,KAAKC,OAPhB,yBASJjD,GAAY,GATR,mFAwBZD,a,kCChFFmD,EAAY,WAAO,IACb1G,EAAY4C,qBAAWC,KAAvB7C,QACF2G,EAAQvE,IACd,OAAgB,IAAZpC,EAAsB,kBAACD,EAAA,EAAD,MAEtB,kBAAC6G,EAAA,EAAD,CAAMrI,MAAO,CAAEsI,UAAWjI,IAAQ8B,QAC7BiG,EAAMhB,QAAU,kBAACzE,EAAA,EAAD,MAAcyF,EAAMpE,KAAO,kBAAC,EAAD,CAAWoE,MAAOA,IAAY,kBAAC,EAAD,CAAeA,MAAOA,MAKtGG,EAAY,SAAC,GAA0C,IAAxCH,EAAuC,EAAvCA,MACX1G,EAAIC,cACV,OACI,kBAAC0G,EAAA,EAAD,KACI,kBAACzI,EAAA,EAAD,CACIkB,KAAMY,EAAE,WAAY,CAAE8G,KAAMJ,EAAMpE,KAAMwE,OACxCzH,WAAYW,EAAE,YACdN,cAAegH,EAAMZ,WAExBY,EAAM5D,eACH,kBAAC7B,EAAA,EAAD,MACAyF,EAAMtD,WACN,kBAAC,EAAD,CAASsD,MAAOA,IAEhB,kBAAC,EAAD,CAAWA,MAAOA,MAM5BK,EAAU,SAAC,GAA0C,IAAD,EAAvCL,EAAuC,EAAvCA,MACT1G,EAAIC,cACF+G,EAAY3I,cAAZ2I,QACFvH,EAAUwH,YAAU,qCAA6BP,EAAMtD,iBAAnC,EAA6B,EAAkB8D,iBAAiB,GAAI,UAC9F,OACI,kBAACP,EAAA,EAAD,KACI,kBAACQ,EAAA,EAAD,CAAMC,SAAS,EAAM9I,MAAO,CAAEG,aAAcE,IAAQC,QAC/CoB,EAAE,qBAEP,kBAACqH,EAAA,EAAD,CAAQ/H,KAAM,UAAWK,MAAOqH,EAASxH,MAAOQ,EAAE,WAAYP,QAASA,MAK7E6H,EAAY,SAAC,GAA0C,IAAxCZ,EAAuC,EAAvCA,MACX1G,EAAIC,cACJsH,EAAuBb,EAAM1D,OAAS0D,EAAM1D,KAAKV,KAAKkF,IAAIC,WAAW,YAC3E,OACI,kBAACd,EAAA,EAAD,KACKY,EACG,oCACI,kBAACJ,EAAA,EAAD,CAAM7G,OAAO,EAAMhC,MAAO,CAAEG,aAAcE,IAAQC,QAC7CoB,EAAE,iCAEP,kBAAC,EAAD,CAAyB0G,MAAOA,KAGpC,oCACI,kBAACS,EAAA,EAAD,CAAMC,SAAS,EAAM9G,OAAO,GACvBN,EAAE,oBAEN0G,EAAM1D,KAAO,kBAAC,EAAD,CAAU0D,MAAOA,IAAY,kBAAC,EAAD,CAAaA,MAAOA,OAO7EgB,EAAW,SAAC,GAA0C,IAAxChB,EAAuC,EAAvCA,MACV1G,EAAIC,cACF0H,EAActJ,cAAdsJ,UAF+C,EAGzB9E,oBAAS,GAHgB,WAGhD+E,EAHgD,KAGvCC,EAHuC,KAIvD,OACI,kBAAClB,EAAA,EAAD,KACI,kBAACjG,EAAA,EAAD,CAAYK,OAAQ,IAAKC,OAAQ,SAChC4G,EACG,oCACI,kBAACP,EAAA,EAAD,CAAQ1H,MAAOgI,EAAWnI,MAAOQ,EAAE,SAAU0F,QAASgB,EAAMpD,SAAU7D,QAASiH,EAAMV,WAGzF,oCACI,kBAACmB,EAAA,EAAD,CAAM7G,OAAO,EAAMhC,MAAO,CAAEsI,UAAWjI,IAAQC,QAC1CoB,EAAE,6BAEP,kBAAC,EAAD,CAAa6H,WAAYA,OAOvCC,EAAc,SAAC,GAAoB,IAAlBD,EAAiB,EAAjBA,WACXE,EAAY1J,cAAZ0J,QACF/H,EAAIC,cAWV,OACI,kBAACoH,EAAA,EAAD,CACIW,KAAM,CAAE1I,KAAM,qBAAsBwH,KAAM,UAAWnH,MAAO,QAASJ,KAAM,IAC3EC,MAAOQ,EAAE,SACTL,MAAOoI,EACPtI,QAfQ,WACZgC,OAAOwG,KACH,yCACIC,mBAAmBlI,EAAE,6BACrB,QACAkI,mBAAmB,+DACvB,UAEJL,GAAW,IAQPvJ,MAAO,CAAEsI,UAAWjI,IAAQC,UAKlCuJ,EAAc,SAAC,GAA0C,IAAxCzB,EAAuC,EAAvCA,MACb1G,EAAIC,cADgD,EAE7B5B,cAArB0J,EAFkD,EAElDA,QAASK,EAFyC,EAEzCA,QACXC,EAAYpB,YAAU,8DAA+D,GAAI,UACzFqB,EAAYrB,YAAU,6BAA8B,GAAI,UAC9D,OACI,kBAACN,EAAA,EAAD,KACI,kBAACjG,EAAA,EAAD,CAAYK,OAAQ,IAAKC,OAAQ,SACjC,kBAACmG,EAAA,EAAD,CAAM7G,OAAO,EAAMhC,MAAO,CAAEsI,UAAWjI,IAAQC,QAC1CoB,EAAE,2BADP,IACoC0G,EAAMxD,OAE1C,kBAACmE,EAAA,EAAD,CACIW,KAAM,CAAE1I,KAAM,qBAAsBwH,KAAM,UAAWnH,MAAO,QAASJ,KAAM,IAC3EC,MAAOQ,EAAE,wBACTL,MAAOoI,EACPtI,QAAS4I,EACT/J,MAAO,CAAEsI,UAAWjI,IAAQC,SAEhC,kBAACyI,EAAA,EAAD,CACIW,KAAM,CAAE1I,KAAM,qBAAsBwH,KAAM,UAAWnH,MAAO,QAASJ,KAAM,IAC3EC,MAAOQ,EAAE,iBACTL,MAAOyI,EACP3I,QAAS6I,EACThK,MAAO,CAAEsI,UAAWjI,IAAQC,WAMtC2J,EAAgB,SAAC,GAA0C,IAAxC7B,EAAuC,EAAvCA,MACf1G,EAAIC,cACV,OACI,kBAAC0G,EAAA,EAAD,KACI,kBAACzI,EAAA,EAAD,CAASkB,KAAMY,EAAE,0BACjB,kBAAC,EAAD,CAAyB0G,MAAOA,IAChC,kBAAC,IAAD,CAAY8B,QAAQ,0BAK1BC,EAA0B,SAAC,GAA0C,IAAxC/B,EAAuC,EAAvCA,MACzB1G,EAAIC,cACF8H,EAAY1J,cAAZ0J,QACR,OACI,kBAACV,EAAA,EAAD,CACI7H,MAAOQ,EAAE,wBACTL,MAAOoI,EACPC,KAAM,CAAE1I,KAAM,qBAAsBwH,KAAM,UAAWnH,MAAO,QAASJ,KAAM,IAC3EjB,MAAO,CAAEG,aAAcE,IAAQmC,QAC/BrB,QAAS,kBAAMiH,EAAMf,cAKlB+C,UA5LS,WACpB,IAAM1I,EAAIC,cACV,OACI,kBAAC0I,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAO3J,KAAMY,EAAE,gBACf,kBAACmH,EAAA,EAAD,CAAM7G,OAAO,GAAON,EAAE,oBACtB,kBAAC,EAAD,OAEa,QAAhBgJ,IAASC,IAAgB,kBAACC,EAAA,EAAD,OAE9B,kBAAC,IAAD","file":"static/js/16.ce8678fe.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { Percent } from \"@sushiswap/sdk\";\n\nexport const TTL = 60 * 20;\nexport const ALLOWED_SLIPPAGE = new Percent(\"50\", \"10000\"); // 0.05%\nexport const FEE = new Percent(\"3\", \"1000\"); // 0.3%\nexport const API_SERVER = process.env.NODE_ENV === \"production\" ? \"https://api.levxdao.org\" : \"http://localhost:3001\";\n","import { useContext, useState } from \"react\";\n\nimport { useAuth0, User } from \"@auth0/auth0-react\";\nimport { abi } from \"@levxdao/zero-money/artifacts/contracts/ZeroMoney.sol/ZeroMoney.json\";\nimport { address, receipt } from \"@levxdao/zero-money/deployments/mainnet/ZeroMoney.json\";\nimport { ZeroMoney } from \"@levxdao/zero-money/typechain/ZeroMoney\";\nimport { Contract, Event, providers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { API_SERVER } from \"../constants\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nexport interface ClaimZeroState {\n    loading: boolean;\n    authenticating: boolean;\n    user?: User;\n    auth?: Auth;\n    error?: string;\n    claimEvent?: Event;\n    onLogin: () => void;\n    onLogout: () => void;\n    onClaim: () => void;\n    claiming: boolean;\n}\n\nexport interface Auth {\n    user: Record<string, any>;\n    id: string;\n    address: string;\n    signature: Signature;\n}\n\nexport interface Signature {\n    v: number;\n    r: string;\n    s: string;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useClaimZeroState: () => ClaimZeroState = () => {\n    const { isLoading, user, isAuthenticated, loginWithRedirect, logout, getAccessTokenSilently } = useAuth0();\n    const { signer } = useContext(EthersContext);\n    const [authenticating, setAuthenticating] = useState(false);\n    const [auth, setAuth] = useState<Auth>();\n    const [error, setError] = useState(\"\");\n    const [claimEvent, setClaimEvent] = useState<Event>();\n    const [claiming, setClaiming] = useState(false);\n    const [lastUpdated, setLastUpdated] = useState(0);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (isAuthenticated && signer) {\n            if (window.location.search) {\n                window.history.replaceState({}, \"\", getRedirectUri());\n            }\n            setAuth(undefined);\n            setAuthenticating(true);\n            setError(\"\");\n            setClaimEvent(undefined);\n            try {\n                const accessToken = await getAccessTokenSilently({ scope: \"openid profile email\" });\n                const account = await signer.getAddress();\n                const resp = await fetch(API_SERVER + `/zero/auth?access_token=${accessToken}&address=${account}`);\n                if (resp.status === 200) {\n                    const data = await resp.json();\n                    setAuth(data);\n                    if (data) {\n                        // tslint:disable-next-line:no-console\n                        console.log(\"id: \" + data.id);\n                        // tslint:disable-next-line:no-console\n                        console.log(\"address: \" + data.address);\n                        // tslint:disable-next-line:no-console\n                        console.log(\"user: \" + JSON.stringify(data.user));\n                    }\n                    // Load events\n                    const contract = getContract(signer);\n                    const claim = contract.filters.Claim(data.id);\n                    const events = await contract.queryFilter(claim, receipt.blockNumber);\n                    if (events.length > 0) {\n                        setClaimEvent(events[0]);\n                    }\n                } else {\n                    const data = await resp.json();\n                    setError(data.errors?.[0]?.message || \"\");\n                }\n            } finally {\n                setAuthenticating(false);\n            }\n        }\n    }, [isAuthenticated, signer, lastUpdated]);\n\n    const onLogin = async () => {\n        await loginWithRedirect({ connection: \"twitter\", redirectUri: getRedirectUri() });\n    };\n\n    const onLogout = async () => {\n        await logout({ returnTo: getRedirectUri() });\n    };\n\n    const onClaim = async () => {\n        if (signer && auth) {\n            try {\n                setClaiming(true);\n                const contract = getContract(signer);\n                const tx = await contract.claim(auth.id, auth.signature.v, auth.signature.r, auth.signature.s);\n                await tx.wait();\n                setLastUpdated(Date.now());\n            } finally {\n                setClaiming(false);\n            }\n        }\n    };\n\n    return {\n        loading: isLoading,\n        authenticating,\n        user,\n        auth,\n        error,\n        claimEvent,\n        onLogin,\n        onLogout,\n        onClaim,\n        claiming\n    };\n};\n\nconst getRedirectUri = () => {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port === \"80\" ? \"\" : \":\" + port) + \"/#/zero/claim\";\n};\n\nconst getContract = (signer: providers.JsonRpcSigner) => {\n    return (new Contract(address, abi, signer) as unknown) as ZeroMoney;\n};\n\nexport default useClaimZeroState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, TouchableHighlight, View } from \"react-native\";\nimport TweetEmbed from \"react-tweet-embed\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { ZeroSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useClaimZeroState, { ClaimZeroState } from \"../hooks/useClaimZeroState\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Screen from \"./Screen\";\n\nconst ClaimZeroScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"claim-zero\")} />\n                    <Text light={true}>{t(\"claim-zero-desc\")}</Text>\n                    <ClaimZero />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <ZeroSubMenu />\n        </Screen>\n    );\n};\n\nconst ClaimZero = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useClaimZeroState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {state.loading ? <Loading /> : state.user ? <LoginInfo state={state} /> : <SignInButtons state={state} />}\n        </View>\n    );\n};\n\nconst LoginInfo = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading\n                text={t(\"welcome-\", { name: state.user!.name })}\n                buttonText={t(\"sign-out\")}\n                onPressButton={state.onLogout}\n            />\n            {state.authenticating ? (\n                <Loading />\n            ) : state.claimEvent ? (\n                <Claimed state={state} />\n            ) : (\n                <ClaimInfo state={state} />\n            )}\n        </View>\n    );\n};\n\nconst Claimed = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    const { primary } = useColors();\n    const onPress = useLinker(\"https://etherscan.io/tx/\" + state.claimEvent?.transactionHash, \"\", \"_blank\");\n    return (\n        <View>\n            <Text caption={true} style={{ marginBottom: Spacing.small }}>\n                {t(\"you-claimed-zero\")}\n            </Text>\n            <Button type={\"outline\"} color={primary} title={t(\"view-tx\")} onPress={onPress} />\n        </View>\n    );\n};\n\nconst ClaimInfo = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    const signedInUsingDiscord = state.auth && !state.auth.user.sub.startsWith(\"twitter|\");\n    return (\n        <View>\n            {signedInUsingDiscord ? (\n                <>\n                    <Text light={true} style={{ marginBottom: Spacing.small }}>\n                        {t(\"sign-in-with-twitter-instead\")}\n                    </Text>\n                    <SignInWithTwitterButton state={state} />\n                </>\n            ) : (\n                <>\n                    <Text caption={true} light={true}>\n                        {t(\"you-can-receive\")}\n                    </Text>\n                    {state.auth ? <Eligible state={state} /> : <NotEligible state={state} />}\n                </>\n            )}\n        </View>\n    );\n};\n\nconst Eligible = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    const { secondary } = useColors();\n    const [tweeted, setTweeted] = useState(false);\n    return (\n        <View>\n            <AmountMeta amount={\"1\"} suffix={\"ZERO\"} />\n            {tweeted ? (\n                <>\n                    <Button color={secondary} title={t(\"claim\")} loading={state.claiming} onPress={state.onClaim} />\n                </>\n            ) : (\n                <>\n                    <Text light={true} style={{ marginTop: Spacing.small }}>\n                        {t(\"tweet-about-distribution\")}\n                    </Text>\n                    <TweetButton setTweeted={setTweeted} />\n                </>\n            )}\n        </View>\n    );\n};\n\nconst TweetButton = ({ setTweeted }) => {\n    const { twitter } = useColors();\n    const t = useTranslation();\n    const onTweet = () => {\n        window.open(\n            \"https://twitter.com/intent/tweet?text=\" +\n                encodeURIComponent(t(\"tweet-zero-money-content\")) +\n                \"&url=\" +\n                encodeURIComponent(\"https://twitter.com/thezeromoney/status/1510041941203103746\"),\n            \"_blank\"\n        );\n        setTweeted(true);\n    };\n    return (\n        <Button\n            icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n            title={t(\"tweet\")}\n            color={twitter}\n            onPress={onTweet}\n            style={{ marginTop: Spacing.small }}\n        />\n    );\n};\n\nconst NotEligible = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    const { twitter, discord } = useColors();\n    const onTwitter = useLinker(\"https://twitter.com/thezeromoney/status/1510041941203103746\", \"\", \"_blank\");\n    const onDiscord = useLinker(\"https://discord.gg/oh-geez\", \"\", \"_blank\");\n    return (\n        <View>\n            <AmountMeta amount={\"0\"} suffix={\"LEVX\"} />\n            <Text light={true} style={{ marginTop: Spacing.small }}>\n                {t(\"claim-zero-not-eligible\")} {state.error}\n            </Text>\n            <Button\n                icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n                title={t(\"follow-like-rt-tweet\")}\n                color={twitter}\n                onPress={onTwitter}\n                style={{ marginTop: Spacing.small }}\n            />\n            <Button\n                icon={{ type: \"material-community\", name: \"discord\", color: \"white\", size: 20 }}\n                title={t(\"go-to-discord\")}\n                color={discord}\n                onPress={onDiscord}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst SignInButtons = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"sign-in-with-twitter\")} />\n            <SignInWithTwitterButton state={state} />\n            <TweetEmbed tweetId=\"1510041941203103746\" />\n        </View>\n    );\n};\n\nconst SignInWithTwitterButton = ({ state }: { state: ClaimZeroState }) => {\n    const t = useTranslation();\n    const { twitter } = useColors();\n    return (\n        <Button\n            title={t(\"sign-in-with-twitter\")}\n            color={twitter}\n            icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n            style={{ marginBottom: Spacing.normal }}\n            onPress={() => state.onLogin()}\n        />\n    );\n};\n\nexport default ClaimZeroScreen;\n"],"sourceRoot":""}
{"version":3,"sources":["src/components/Heading.tsx","src/components/ChangeNetwork.tsx","src/components/ItemSeparator.tsx","src/components/Loading.tsx","src/components/Selectable.tsx","src/components/TokenLogo.tsx","src/components/Border.tsx","src/components/CloseIcon.tsx","src/components/SelectIcon.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InfoBox.tsx","src/constants/index.ts","src/components/Expandable.tsx","src/components/Meta.tsx","src/components/TokenSymbol.tsx","assets/images/empty-token.png","assets/images/ETH.png","src/constants/airdrops/index.ts","src/components/AirdropSelect.tsx","src/utils/getAirdropContract.ts","src/hooks/useAirdropsState.tsx","src/screens/AirdropsScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ITEM_SEPARATOR_HEIGHT","ItemSeparator","Loading","Selectable","borderDark","overlay","border","useStyles","background","backgroundLight","containerStyle","hovered","activeOpacity","underlayColor","selected","backgroundColor","TokenLogo","useState","error","setError","placeholder","require","ETH","source","replaceWETH","isWETH","token","uri","logoURI","width","borderRadius","onError","opacity","Border","marginTop","CloseIcon","name","marginLeft","SelectIcon","ErrorMessage","borderColor","borderWidth","padding","code","note","message","FetchingButton","InfoBox","darkMode","useContext","GlobalContext","normal","TTL","ALLOWED_SLIPPAGE","Percent","FEE","API_SERVER","process","Expandable","expanded","setExpanded","shouldExpand","viewOnly","undefined","onExpand","display","children","Meta","textMedium","textLight","red","useLinker","url","suffix","label","danger","textDecorationLine","TokenSymbol","caption","symbol","module","exports","description","constants","AddressZero","merkleRoot","snapshot","amount","utils","parseEther","entries","levxShoyuGrant","sushiCnAma","master3","AirdropList","EthersContext","loadingTokens","tokens","renderItem","useCallback","item","find","address","key","airdrop","onSelectAirdrop","View","FlatList","keyExtractor","data","airdrops","AirdropItem","FlexView","Text","numberOfLines","ellipsizeMode","number","formatBalance","AirdropSelect","state","console","log","tk","selectedAirdrop","setSelectedAirdrop","getERC20AirdropsContract","signerOrProvider","Contract","ERC20","abi","getETHAirdropContract","getLevxAirdropContract","Levx","useAirdropsState","provider","signer","updateTokens","loading","setLoading","claimEvent","setClaimEvent","claiming","setClaiming","useEffect","a","async","contract","filter","filters","Claim","LEVX","queryFilter","ethAirdropReceipt","blockNumber","events","length","e","toLowerCase","onClaimLevx","entry","root","getMerkleRoot","proof","getMerkleProof","claim","parseBalance","tx","wait","onClaimERC20","onClaimETH","onClaimAsLevx","Fetcher","fetchPairData","convertToken","pair","getOutputAmount","convertAmount","amountOut","amountOutMin","deduct","toExact","deadline","Math","floor","Date","getTime","claimAndSwapToLevx","Airdrops","AmountInfo","String","Controls","isZero","outline","NotEligibleButton","Button","ClaimingButton","ClaimButton","ClaimAsLevxButton","ClaimedButton","AirdropsScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/6.9778f7af.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nexport const ITEM_SEPARATOR_HEIGHT = 10;\n\nconst ItemSeparator = () => <View style={{ height: ITEM_SEPARATOR_HEIGHT }} />;\n\nexport default ItemSeparator;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import React, { FC } from \"react\";\nimport { TouchableHighlight, View, ViewProps, ViewStyle } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface SelectableProps extends ViewProps {\n    selected: boolean;\n    onPress?: () => void;\n    disabled?: boolean;\n    containerStyle?: ViewStyle;\n}\n\nconst Selectable: FC<SelectableProps> = props => {\n    const { borderDark, accent, overlay } = useColors();\n    const { border } = useStyles();\n    const { background, backgroundLight } = useColors();\n    return (\n        <Hoverable style={props.containerStyle}>\n            {({ hovered }) => (\n                <TouchableHighlight activeOpacity={0.7} underlayColor={overlay} onPress={props.onPress}>\n                    <View\n                        {...props}\n                        style={[\n                            {\n                                ...border({ color: props.selected ? accent : borderDark }),\n                                backgroundColor: hovered && !props.disabled ? backgroundLight : background\n                            },\n                            props.style\n                        ]}\n                    />\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default Selectable;\n","import React, { useState } from \"react\";\nimport { Image, View, ViewStyle } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { isWETH } from \"../utils\";\n\nconst TokenLogo = (props: {\n    token: Token;\n    small?: boolean;\n    replaceWETH?: boolean;\n    disabled?: boolean;\n    style?: ViewStyle;\n}) => {\n    const { backgroundLight: disabled } = useColors();\n    const [error, setError] = useState(false);\n    const size = props.small ? 22 : 27;\n    const placeholder = require(\"../../assets/images/empty-token.png\");\n    const ETH = require(\"../../assets/images/ETH.png\");\n    const source = props.replaceWETH && isWETH(props.token) ? ETH : { uri: props.token.logoURI };\n    return (\n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    backgroundColor: props.disabled ? disabled : \"white\",\n                    borderRadius: size / 2\n                },\n                props.style\n            ]}>\n            <Image\n                source={!props.token.logoURI || error ? placeholder : source}\n                onError={() => setError(true)}\n                style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: size / 2,\n                    opacity: props.disabled ? 0.5 : 1\n                }}\n            />\n        </View>\n    );\n};\n\nexport default TokenLogo;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { accent } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={accent} style={{ marginLeft: 4 }} />;\n};\n\nexport default CloseIcon;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { accent } = useColors();\n    return <Icon type={\"material-community\"} name={\"chevron-right\"} color={accent} style={{ marginLeft: 4 }} />;\n};\n\nexport default SelectIcon;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import { Percent } from \"@sushiswap/sdk\";\n\nexport const TTL = 60 * 20;\nexport const ALLOWED_SLIPPAGE = new Percent(\"50\", \"10000\"); // 0.05%\nexport const FEE = new Percent(\"3\", \"1000\"); // 0.3%\nexport const API_SERVER = process.env.NODE_ENV === \"production\" ? \"https://api.levxdao.org\" : \"http://localhost:3001\";\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Heading from \"./Heading\";\n\nexport interface ExpandableProps {\n    title: string;\n    expanded: boolean;\n    onExpand?: () => void;\n    viewOnly?: boolean;\n    style?: ViewStyle;\n    children?: ReactNode;\n}\n\nconst Expandable: FC<ExpandableProps> = props => {\n    const t = useTranslation();\n    const [expanded, setExpanded] = useState(true);\n    const shouldExpand = props.expanded && expanded;\n    const buttonText = props.viewOnly || shouldExpand ? undefined : t(\"change\");\n    const onPress = () => {\n        setExpanded(true);\n        props.onExpand?.();\n    };\n\n    return (\n        <View style={props.style}>\n            <Heading text={props.title} buttonText={buttonText} onPressButton={onPress} />\n            <View style={{ display: shouldExpand ? \"flex\" : \"none\" }}>{props.children}</View>\n        </View>\n    );\n};\n\nexport default Expandable;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    danger?: boolean;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const t = useTranslation();\n    const { textMedium, textLight, placeholder, red } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : t(\"fetching\");\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.danger ? red : props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","module.exports = __webpack_public_path__ + \"static/media/ETH.ab794f02.png\";","import { constants, utils } from \"ethers\";\nimport Airdrop from \"../../types/Airdrop\";\nimport levxShoyuGrant from \"./levx-shoyu-grant.csv.json\";\nimport master3 from \"./master-3%.csv.json\";\nimport sushiCnAma from \"./sushi-cn-ama.csv.json\";\n\nexport default [\n    {\n        name: \"Shoyu Grant Payout\",\n        description: \"For $LEVX holders\",\n        token: constants.AddressZero,\n        merkleRoot: \"0x0737c6eeb66be734365fd7a7a1c505bb32b815da441f2959b0b8141583340472\",\n        snapshot: 13711588,\n        amount: utils.parseEther(\"16.124383959865324089\"),\n        entries: levxShoyuGrant\n    },\n    {\n        name: \"LEVX Airdrop\",\n        description: \"SushiSwap China AMA\",\n        token: \"0xf474E526ADe9aD2CC2B66ffCE528B1A51B91FCdC\",\n        merkleRoot: \"0x84a50342486cf8cd0aa75740ad78b8a780f5ba76139411f5b6433506d538381c\",\n        amount: utils.parseEther(\"6.67\"),\n        entries: sushiCnAma\n    },\n    {\n        name: \"3% of $MASTER Airdrop\",\n        description: \"For $MAID holders\",\n        token: \"0xc0746351f7F55a69415b280Ca6378093EA4aAFF2\",\n        merkleRoot: \"0x6ce85395f71223353592f7d4fbb56a2971c36b474c4bfe1da9a50ce3405d1c56\",\n        snapshot: 13732533,\n        amount: utils.parseEther(\"3\"),\n        entries: master3\n    }\n] as Airdrop[];\n","import React, { useCallback, useContext } from \"react\";\nimport { FlatList, View } from \"react-native\";\n\nimport airdrops from \"../constants/airdrops\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { AirdropsState } from \"../hooks/useAirdropsState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Airdrop from \"../types/Airdrop\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nconst AirdropSelect = ({ state }: { state: AirdropsState }) => {\n    console.log(airdrops);\n    const t = useTranslation();\n    const { tokens } = useContext(EthersContext);\n    const token = tokens.find(tk => tk.address === state.selectedAirdrop?.token);\n    return (\n        <>\n            <Expandable\n                title={t(\"list-of-airdrops\")}\n                expanded={!state.selectedAirdrop}\n                onExpand={() => state.setSelectedAirdrop()}>\n                <AirdropList onSelectAirdrop={state.setSelectedAirdrop} />\n            </Expandable>\n            {state.selectedAirdrop && token && (\n                <AirdropItem\n                    airdrop={state.selectedAirdrop}\n                    token={token}\n                    selected={true}\n                    onSelectAirdrop={() => state.setSelectedAirdrop()}\n                />\n            )}\n        </>\n    );\n};\n\nconst AirdropList = (props: { onSelectAirdrop: (airdrop: Airdrop) => void }) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            const token = tokens.find(t => t.address === item.token);\n            if (token) {\n                return (\n                    <AirdropItem\n                        key={item.address}\n                        airdrop={item}\n                        token={token}\n                        selected={false}\n                        onSelectAirdrop={props.onSelectAirdrop}\n                    />\n                );\n            } else {\n                return <View />;\n            }\n        },\n        [tokens, props.onSelectAirdrop]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : (\n        <FlatList keyExtractor={item => item.token} data={airdrops} renderItem={renderItem} />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst AirdropItem = (props: {\n    airdrop: Airdrop;\n    token: TokenWithValue;\n    selected: boolean;\n    onSelectAirdrop: (airdrop: Airdrop) => void;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        props.onSelectAirdrop(props.airdrop);\n    }, [props.onSelectAirdrop, props.airdrop]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <View style={{ marginLeft: Spacing.small }}>\n                    <Text note={true} fontWeight={\"light\"}>\n                        {props.airdrop.description}\n                    </Text>\n                    <Text caption={true} numberOfLines={1} ellipsizeMode={\"tail\"} style={{ width: 180 }}>\n                        {props.airdrop.name}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    {props.airdrop.snapshot && (\n                        <Text note={true} fontWeight={\"light\"}>\n                            {t(\"block-\", { number: props.airdrop.snapshot })}\n                        </Text>\n                    )}\n                    <FlexView>\n                        <Text caption={IS_DESKTOP}>{formatBalance(props.airdrop.amount, 18, 8)}</Text>\n                        {IS_DESKTOP && <TokenSymbol token={props.token} />}\n                    </FlexView>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default AirdropSelect;\n","import ERC20 from \"@levxdao/airdrop/deployments/mainnet/ERC20Airdrops.json\";\nimport ETH from \"@levxdao/airdrop/deployments/mainnet/ETHAirdrop.json\";\nimport Levx from \"@levxdao/airdrop/deployments/mainnet/LevxAirdrop.json\";\nimport { ERC20Airdrops, ETHAirdrop, LevxAirdrop } from \"@levxdao/airdrop/typechain\";\nimport { Contract, ethers } from \"ethers\";\n\nexport const getERC20AirdropsContract = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    // @ts-ignore\n    return new Contract(ERC20.address, ERC20.abi, signerOrProvider) as ERC20Airdrops;\n};\n\nexport const getETHAirdropContract = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    // @ts-ignore\n    return new Contract(ETH.address, ETH.abi, signerOrProvider) as ETHAirdrop;\n};\n\nexport const getLevxAirdropContract = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    // @ts-ignore\n    return new Contract(Levx.address, Levx.abi, signerOrProvider) as LevxAirdrop;\n};\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { receipt as ethAirdropReceipt } from \"@levxdao/airdrop/deployments/mainnet/ETHAirdrop.json\";\nimport { getMerkleProof, getMerkleRoot } from \"@levxdao/merkle-tree-generator\";\nimport { Fetcher } from \"@sushiswap/sdk\";\nimport { Event } from \"ethers\";\nimport { ALLOWED_SLIPPAGE, TTL } from \"../constants\";\nimport { ETH, LEVX } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Airdrop from \"../types/Airdrop\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { convertAmount, convertToken, deduct, parseBalance } from \"../utils\";\nimport { getERC20AirdropsContract, getETHAirdropContract, getLevxAirdropContract } from \"../utils/getAirdropContract\";\n\nexport interface AirdropsState {\n    selectedAirdrop?: Airdrop;\n    setSelectedAirdrop: (airdrop?: Airdrop) => void;\n    token?: TokenWithValue;\n    amount?: string;\n    loading: boolean;\n    claimEvent?: Event;\n    onClaimLevx: () => Promise<void>;\n    onClaimERC20: () => Promise<void>;\n    onClaimETH: () => Promise<void>;\n    onClaimAsLevx: () => Promise<void>;\n    claiming: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAirdropsState: () => AirdropsState = () => {\n    const { provider, signer, address, tokens, updateTokens } = useContext(EthersContext);\n    const [selectedAirdrop, setSelectedAirdrop] = useState<Airdrop>();\n    const [loading, setLoading] = useState(false);\n    const [claimEvent, setClaimEvent] = useState<Event>();\n    const [claiming, setClaiming] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            if (selectedAirdrop && provider) {\n                setLoading(true);\n                try {\n                    let contract;\n                    let filter;\n                    if (selectedAirdrop.token === ETH.address) {\n                        contract = getETHAirdropContract(provider);\n                        filter = contract.filters.Claim(selectedAirdrop.merkleRoot, address);\n                    } else if (selectedAirdrop.token === LEVX.address) {\n                        contract = getLevxAirdropContract(provider);\n                        filter = contract.filters.Claim(selectedAirdrop.merkleRoot, address);\n                    } else {\n                        contract = getERC20AirdropsContract(provider);\n                        filter = contract.filters.Claim(\n                            selectedAirdrop.token,\n                            selectedAirdrop.merkleRoot,\n                            null,\n                            address\n                        );\n                    }\n                    const events = await contract.queryFilter(filter, ethAirdropReceipt.blockNumber);\n                    if (events.length > 0) {\n                        setClaimEvent(events[0]);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        })();\n    }, [selectedAirdrop, provider]);\n\n    const onClaimLevx = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const contract = getLevxAirdropContract(signer);\n                const tx = await contract.claim(root, proof, parseBalance(amount));\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const onClaimERC20 = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const contract = getERC20AirdropsContract(signer);\n                const tx = await contract.claim(selectedAirdrop.token, root, proof, parseBalance(amount));\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const onClaimETH = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const contract = getETHAirdropContract(signer);\n                const tx = await contract.claim(root, proof, parseBalance(amount), address);\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const onClaimAsLevx = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const pair = await Fetcher.fetchPairData(convertToken(ETH), convertToken(LEVX), provider);\n                const [amountOut] = pair.getOutputAmount(convertAmount(ETH, amount));\n                const amountOutMin = deduct(parseBalance(amountOut.toExact()), ALLOWED_SLIPPAGE);\n                const deadline = Math.floor(new Date().getTime() / 1000) + TTL;\n                const contract = getETHAirdropContract(signer);\n                const tx = await contract.claimAndSwapToLevx(\n                    root,\n                    proof,\n                    parseBalance(amount),\n                    amountOutMin,\n                    address,\n                    deadline\n                );\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const token = tokens.find(tk => tk.address === selectedAirdrop?.token);\n    const amount = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase())?.[1];\n\n    return {\n        selectedAirdrop,\n        setSelectedAirdrop,\n        token,\n        amount,\n        loading,\n        claimEvent,\n        onClaimLevx,\n        onClaimERC20,\n        onClaimETH,\n        onClaimAsLevx,\n        claiming\n    };\n};\n\nexport default useAirdropsState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AirdropSelect from \"../components/AirdropSelect\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InfoBox from \"../components/InfoBox\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AirdropsSubMenu } from \"../components/web/WebSubMenu\";\nimport airdrops from \"../constants/airdrops\";\nimport { LEVX_TOKEN } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH, LEVX } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAirdropsState, { AirdropsState } from \"../hooks/useAirdropsState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst AirdropsScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"airdrops\")} />\n                    <Text light={true}>{t(\"airdrops-desc\")}</Text>\n                    <Airdrops />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AirdropsSubMenu />\n        </Screen>\n    );\n};\n\nconst Airdrops = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useAirdropsState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <AirdropSelect state={state} />\n            <Border />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: AirdropsState }) => {\n    const t = useTranslation();\n    const disabled = !state.selectedAirdrop || !state.amount;\n    const snapshot = state.selectedAirdrop?.snapshot;\n    return (\n        <InfoBox>\n            <Meta\n                label={t(\"claimable-\", { symbol: state.token?.symbol || \"LEVX\" })}\n                text={state.amount || \"\"}\n                disabled={disabled}\n            />\n            {snapshot && (\n                <Meta label={t(\"block\")} text={String(snapshot)} url={\"https://etherscan.io/block/\" + snapshot} />\n            )}\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: AirdropsState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedAirdrop ? (\n                <ClaimButton state={state} onError={setError} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : state.claimEvent ? (\n                <ClaimedButton />\n            ) : state.claiming ? (\n                <ClaimingButton />\n            ) : !state.amount || parseBalance(state.amount).isZero() ? (\n                <NotEligibleButton />\n            ) : state.selectedAirdrop.token === ETH.address ? (\n                <>\n                    <ClaimButton state={state} onError={setError} outline={true} />\n                    <View style={{ height: Spacing.tiny }} />\n                    <ClaimAsLevxButton state={state} onError={setError} />\n                </>\n            ) : (\n                <ClaimButton state={state} onError={setError} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\nconst NotEligibleButton = ({}: {}) => {\n    const t = useTranslation();\n    return <Button title={t(\"not-eligible\")} disabled={true} />;\n};\n\nconst ClaimingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"claiming\")} disabled={true} />;\n};\n\nconst ShareAirdropToTwitterButton = ({ state }: { state: AirdropsState }) => {\n    const t = useTranslation();\n    const tweet =\n        state.selectedAirdrop && state.token\n            ? \"The dictator of @LevXDAOhGeez is airdropping \" +\n              formatBalance(state.selectedAirdrop.amount, 18, 8) +\n              \" $\" +\n              state.token.symbol +\n              \" (=\" +\n              ((state.token.priceUSD || 0) * Number(formatBalance(state.selectedAirdrop.amount, 18, 2))).toFixed(4) +\n              \" USD) for poor Mortys in the DAO. If you want to get notified of the upcoming airdrops, visit the discord.\\n👇https://discord.gg/oh-geez\"\n            : \"\";\n    const onPress = useLinker(\"https://twitter.com/intent/tweet?text=\" + encodeURIComponent(tweet), \"\", \"_blank\");\n    return (\n        <Button\n            icon={{\n                type: \"material-community\",\n                name: \"twitter\",\n                color: \"white\",\n                size: 20\n            }}\n            iconRight={true}\n            title={t(\"share-airdrop-to-twitter\")}\n            color={\"#1DA1F2\"}\n            onPress={onPress}\n        />\n    );\n};\n\nconst ClaimButton = ({\n    state,\n    onError,\n    outline,\n    disabled\n}: {\n    state: AirdropsState;\n    onError: (e) => void;\n    outline?: boolean;\n    disabled?: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            if (state.selectedAirdrop?.token === ETH.address) {\n                await state.onClaimETH();\n            } else if (state.selectedAirdrop?.token === LEVX.address) {\n                await state.onClaimLevx();\n            } else {\n                await state.onClaimERC20();\n            }\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return (\n        <Button\n            title={t(\"claim\")}\n            loading={state.claiming}\n            onPress={onPress}\n            disabled={disabled}\n            type={outline ? \"outline\" : undefined}\n        />\n    );\n};\n\nconst ClaimAsLevxButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AirdropsState;\n    onError: (e) => void;\n    disabled?: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onClaimAsLevx();\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"claim-as-levx\")} loading={state.claiming} onPress={onPress} disabled={disabled} />;\n};\n\nconst ClaimedButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"already-claimed\")} disabled={true} />;\n};\n\nexport default AirdropsScreen;\n"],"sourceRoot":""}
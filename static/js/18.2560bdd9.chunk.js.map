{"version":3,"sources":["src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx"],"names":["LPTokenList","state","emptyText","Item","renderItem","useCallback","item","key","symbol","token","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","loading","length","EmptyList","text","keyExtractor","style","margin","Spacing","normal","disabled","textAlign","width","LPTokenItem","props","textMedium","useColors","balance","formatBalance","decimals","onPress","containerStyle","marginBottom","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","tiny","flex","light","color","viewOnly","LPTokenSelect","title","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","useContext","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","setLoading","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchMyPools","fetchPools","fetchMyLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useRemoveLiquidityState","signer","getTokenAllowance","updateTokens","useSwapRouter","removeLiquidity","removeLiquidityETH","zapOut","useZapper","outputToken","setOutputToken","removing","setRemoving","setFromSymbol","setToSymbol","minAllowance","ethers","BigNumber","from","pow","sub","ROUTER","allowance","gte","totalSupply","liquidityToken","fromReserve","parseCurrencyAmount","reserveOf","convertToken","toReserve","setFromAmount","parseBalance","mul","div","toString","setToAmount","removeFromRouter","fromAmount","toAmount","liquidity","isWETH","amountToRemove","amountToRemoveETH","tx","wait","onRemove","RemoveLiquidity","chainId","t","useTranslation","ChangeNetwork","View","marginTop","large","Border","LPTokenOutputItem","hidden","Selectable","FlexView","TokenLogo","Text","CloseIcon","SelectIcon","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","outputAmount","useMemo","add","deduct","FEE","InfoBox","AmountMeta","suffix","Meta","label","Controls","error","setError","fromSymbol","toSymbol","approveRequired","isEmptyValue","onError","gt","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","message","code","ErrorMessage","RemoveButton","catch","Button","RemoveLiquidityScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/18.2560bdd9.chunk.js","sourcesContent":["import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    disabled?: boolean;\n    viewOnly?: boolean;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    viewOnly?: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                viewOnly={props.viewOnly}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    viewOnly={props.viewOnly}\n                    onSelectToken={props.disabled ? () => {} : onUnselectToken}\n                />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? !props.viewOnly && <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : fetchMyLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { convertToken, formatBalance, isWETH, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSwapRouter from \"./useSwapRouter\";\nimport useZapper from \"./useZapper\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    outputToken?: Token;\n    setOutputToken: (token?: Token) => void;\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSwapRouter();\n    const { zapOut } = useZapper();\n    const [loading, setLoading] = useState(false);\n    const [outputToken, setOutputToken] = useState<Token>();\n    const [removing, setRemoving] = useState(false);\n\n    /*useEffect(() => {\n        setOutputToken(undefined);\n    }, [state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [outputToken]);*/\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            state.setFromSymbol(\"\");\n            state.setToSymbol(\"\");\n        }\n    }, [signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const removeFromRouter = async () => {\n        if (state.selectedLPToken && signer) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n            const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n            if (isWETH(state.fromToken) || isWETH(state.toToken)) {\n                const token = isWETH(state.fromToken) ? state.toToken! : state.fromToken!;\n                const amountToRemove = isWETH(state.fromToken) ? toAmount : fromAmount;\n                const amountToRemoveETH = isWETH(state.fromToken) ? fromAmount : toAmount;\n                const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                await tx.wait();\n            } else {\n                const tx = await removeLiquidity(\n                    state.fromToken!,\n                    state.toToken!,\n                    liquidity,\n                    fromAmount,\n                    toAmount,\n                    signer\n                );\n                await tx.wait();\n            }\n        }\n    };\n\n    const onRemove = useCallback(async () => {\n        if (\n            state.fromAmount &&\n            state.toAmount &&\n            state.selectedLPToken &&\n            state.amount &&\n            // outputToken &&\n            provider &&\n            signer\n        ) {\n            setRemoving(true);\n            try {\n                // if (outputToken === state.selectedLPToken) {\n                await removeFromRouter();\n                // } else {\n                //     const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                //     const tx = await zapOut(state.selectedLPToken, outputToken, amount, provider, signer);\n                //     await tx.wait();\n                // }\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [\n        state.fromAmount,\n        state.toAmount,\n        state.selectedLPToken,\n        state.amount,\n        state.updateLPTokens,\n        removeFromRouter,\n        zapOut,\n        updateTokens,\n        // outputToken,\n        provider,\n        signer\n    ]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        outputToken,\n        setOutputToken,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useContext, useMemo, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AmmSubMenu } from \"../components/web/WebSubMenu\";\nimport { FEE } from \"../constants\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { deduct, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"remove-liquidity\")} />\n                    <Text light={true}>{t(\"remove-liquidity-desc\")}</Text>\n                    <RemoveLiquidity />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AmmSubMenu />\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useRemoveLiquidityState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={t(\"your-liquidity\")}\n                emptyText={t(\"you-dont-have-liquidity\")}\n                Item={LPTokenItem}\n            />\n            {/*<Border />*/}\n            {/*<OutputTokenSelect state={state} />*/}\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst OutputTokenSelect = ({ state }: { state: RemoveLiquidityState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) return <Heading text={t(\"output-tokens\")} disabled={true} />;\n    const onSelectToken = (token: Token) => () => state.setOutputToken(state.outputToken ? undefined : token);\n    return (\n        <View>\n            <Heading text={t(\"output-tokens\")} />\n            <TokenOutputItem\n                token={state.selectedLPToken.tokenA}\n                otherToken={state.selectedLPToken.tokenB}\n                selected={state.outputToken === state.selectedLPToken.tokenA}\n                hidden={!!state.outputToken && state.outputToken !== state.selectedLPToken.tokenA}\n                onSelectToken={onSelectToken(state.selectedLPToken.tokenA)}\n            />\n            <TokenOutputItem\n                token={state.selectedLPToken.tokenB}\n                otherToken={state.selectedLPToken.tokenA}\n                selected={state.outputToken === state.selectedLPToken.tokenB}\n                hidden={!!state.outputToken && state.outputToken !== state.selectedLPToken.tokenB}\n                onSelectToken={onSelectToken(state.selectedLPToken.tokenB)}\n            />\n            <LPTokenOutputItem\n                token={state.selectedLPToken}\n                selected={state.outputToken === state.selectedLPToken}\n                hidden={!!state.outputToken && state.outputToken !== state.selectedLPToken}\n                onSelectToken={onSelectToken(state.selectedLPToken)}\n            />\n        </View>\n    );\n};\n\nconst TokenOutputItem = (props: {\n    token: Token;\n    otherToken: Token;\n    selected: boolean;\n    hidden: boolean;\n    onSelectToken: () => void;\n}) => {\n    const t = useTranslation();\n    if (props.hidden) return <View />;\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={props.onSelectToken}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenSymbol token={props.token} />\n                <Text note={true} style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {IS_DESKTOP &&\n                        t(\"will-be-converted-to\", {\n                            fromSymbol: props.otherToken.symbol,\n                            toSymbol: props.token.symbol\n                        })}\n                </Text>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport const LPTokenOutputItem = (props: {\n    token: LPToken;\n    selected: boolean;\n    hidden: boolean;\n    onSelectToken: () => void;\n}) => {\n    if (props.hidden) return <View />;\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={props.onSelectToken}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol} + {props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1 }} />\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst AmountInput = ({ state }: { state: RemoveLiquidityState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken /* || !state.outputToken*/) {\n        return <Heading text={t(\"amount-of-tokens\")} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={t(\"amount-of-tokens\")}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    const t = useTranslation();\n    const disabled = !state.selectedLPToken || !state.fromToken || !state.toToken;\n    const outputAmount = useMemo(() => {\n        if (state.fromToken && state.outputToken === state.fromToken) {\n            const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n            return formatBalance(amount.add(deduct(amount, FEE)), state.fromToken.decimals);\n        } else if (state.toToken && state.outputToken === state.toToken) {\n            const amount = parseBalance(state.toAmount, state.toToken.decimals);\n            return formatBalance(amount.add(deduct(amount, FEE)), state.toToken.decimals);\n        }\n    }, [state.outputToken, state.fromToken, state.toToken, state.fromAmount, state.toAmount]);\n    return (\n        <InfoBox>\n            {(state.outputToken === state.fromToken || state.outputToken === state.toToken) && (\n                <AmountMeta amount={outputAmount} suffix={state.outputToken?.symbol} disabled={disabled} />\n            )}\n            <Meta\n                label={state.fromToken ? state.fromToken.symbol : t(\"1st-token\")}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={state.toToken ? state.toToken.symbol : t(\"2nd-token\")}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = /*state.outputToken === state.selectedLPToken && */ !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <RemoveButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button title={t(\"remove-liquidity\")} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n"],"sourceRoot":""}
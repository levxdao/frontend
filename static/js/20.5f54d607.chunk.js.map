{"version":3,"sources":["src/components/ChangeNetwork.tsx","src/components/AmountMeta.tsx","src/components/Loading.tsx","src/hooks/useWithdrawZeroDividendState.tsx","src/screens/WithdrawZeroDividendScreen.tsx"],"names":["ChangeNetwork","chainId","t","useTranslation","networkName","1","42","style","flex","alignItems","justifyContent","light","textAlign","marginVertical","Spacing","large","AmountMeta","props","useColors","textDark","textLight","placeholder","fontSize","IS_DESKTOP","marginBottom","normal","color","disabled","amount","suffix","Loading","size","getContract","signer","Contract","address","abi","useWithdrawZeroDividendState","useContext","EthersContext","useState","loading","setLoading","error","setError","setAmount","withdrawing","setWithdrawing","lastUpdated","setLastUpdated","useAsyncEffect","a","async","contract","getAddress","withdrawableDividendOf","dividend","utils","formatEther","message","onWithdraw","withdrawDividend","tx","wait","Date","now","WithdrawZeroDividend","state","secondary","View","marginTop","Text","caption","Button","title","onPress","WithdrawZeroDividendScreen","Screen","Container","BackgroundImage","Content","Title","text","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/20.5f54d607.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { useContext, useState } from \"react\";\n\nimport { abi } from \"@levxdao/zero-money/artifacts/contracts/ZeroMoney.sol/ZeroMoney.json\";\nimport { address, receipt } from \"@levxdao/zero-money/deployments/mainnet/ZeroMoney.json\";\nimport { ZeroMoney } from \"@levxdao/zero-money/typechain/ZeroMoney\";\nimport { BigNumber, Contract, providers, utils } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nexport interface WithdrawZeroDividendState {\n    loading: boolean;\n    error?: string;\n    amount?: string;\n    onWithdraw: () => void;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useWithdrawZeroDividendState: () => WithdrawZeroDividendState = () => {\n    const { signer } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [amount, setAmount] = useState<string>();\n    const [withdrawing, setWithdrawing] = useState(false);\n    const [lastUpdated, setLastUpdated] = useState(0);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (signer) {\n            setAmount(\"\");\n            setError(\"\");\n            setLoading(true);\n            try {\n                const contract = getContract(signer);\n                const dividend = await contract.withdrawableDividendOf(await signer.getAddress());\n                setAmount(utils.formatEther(dividend));\n            } catch (e) {\n                setError(e.message);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, lastUpdated]);\n\n    const onWithdraw = async () => {\n        if (signer) {\n            setError(\"\");\n            setWithdrawing(true);\n            try {\n                const contract = getContract(signer);\n                const tx = await contract.withdrawDividend();\n                await tx.wait();\n                setLastUpdated(Date.now());\n            } catch (e) {\n                setError(e.message);\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    };\n\n    return {\n        loading,\n        error,\n        amount,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nconst getContract = (signer: providers.JsonRpcSigner) => {\n    return (new Contract(address, abi, signer) as unknown) as ZeroMoney;\n};\n\nexport default useWithdrawZeroDividendState;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { ZeroSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport useWithdrawZeroDividendState from \"../hooks/useWithdrawZeroDividendState\";\nimport Screen from \"./Screen\";\n\nconst WithdrawZeroDividendScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"withdraw-zero-dividend\")} />\n                    <Text light={true}>{t(\"withdraw-zero-dividend-desc\")}</Text>\n                    <WithdrawZeroDividend />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <ZeroSubMenu />\n        </Screen>\n    );\n};\n\nconst WithdrawZeroDividend = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useWithdrawZeroDividendState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    const t = useTranslation();\n    const { secondary } = useColors();\n    const disabled = state.amount === \"0.0\";\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <Text caption={true} light={true}>\n                {t(\"you-can-receive\")}\n            </Text>\n            {state.loading || !state.amount ? (\n                <Loading />\n            ) : (\n                <>\n                    <AmountMeta amount={state.amount} suffix={\"ZERO\"} />\n                    <Button\n                        color={secondary}\n                        title={t(\"withdraw\")}\n                        disabled={disabled}\n                        loading={state.withdrawing}\n                        onPress={state.onWithdraw}\n                    />\n                </>\n            )}\n        </View>\n    );\n};\n\nexport default WithdrawZeroDividendScreen;\n"],"sourceRoot":""}